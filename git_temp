


-------------- 2016-08-25 23:04:05
2103  git commit -m "home_0825"
 2104  git rebase origin/master
 2105  git status
 2106  git rebase --continue
 2107  git add .
 2108  git rebase --continue



---------- 2016-08-25 22:47:18
git merge

git --no-ff
默认情况下，Git执行"快进式合并"（fast-farward merge），会直接将Master分支指向Develop分支。
使用--no-ff参数后，会执行正常合并，在Master分支上生成一个新节点。为了保证版本演进的清晰，我们希望采用这种做法。

when merging a commit from another branch, old commits from that branch will also be merged.
  e.g.,  git merge --no-ff 81e6498c4a5183aea2389bb2f4a7a7ec605dc9bd
  then commits before 81e64 will also be merged into the current branch.



git rebase
git rebase用于把一个分支的修改合并到当前分支。
如果你想让"mywork"分支历史看起来像没有经过任何合并一样，你也许可以用 git rebase:
$ git checkout mywork
$ git rebase origin
这些命令会把你的"mywork"分支里的每个提交(commit)取消掉，并且把它们临时 保存为补丁(patch)(这些补丁放到".git/rebase"目录中),然后把"mywork"分支更新 为最新的"origin"分支，最后把保存的这些补丁应用到"mywork"分支上。

kidd@kidd-T430:~/workspace/test/test1$ git checkout slave
Switched to branch 'slave'
kidd@kidd-T430:~/workspace/test/test1$ git rebase master
First, rewinding head to replay your work on top of it...
Applying: s01
Applying: s02
kidd@kidd-T430:~/workspace/test/test1$ git log
commit 87fe8479edf4a074919d969387833291f83ae0ec
Author: anhye <anhye@niub.la>
Date:   Thu Aug 25 22:36:20 2016 +0800

    s02

commit 684aa3f9f8767c5ec887f52bf37b7db2e177102b
Author: anhye <anhye@niub.la>
Date:   Thu Aug 25 22:32:36 2016 +0800

    s01

commit c036ca2ad3ac54d32024188a9f8230b43ed806a6
Author: anhye <anhye@niub.la>
Date:   Thu Aug 25 22:53:21 2016 +0800

    m3

commit a4928fae21426ffd74aea1d062b90db87a10eb71
Author: anhye <anhye@niub.la>
Date:   Thu Aug 25 22:28:56 2016 +0800

    m2

commit 66a4aaf802e590cb9fda59fcbdb17c90a2fdcd13
Author: anhye <anhye@niub.la>
Date:   Thu Aug 25 22:28:03 2016 +0800

    m1

