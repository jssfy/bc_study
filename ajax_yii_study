


--------- 2016-08-10 10:22:40
/home/kidd/workspace/bc/MissionImpossible/vendor/yiisoft/yii2/rest/Controller.php
class Controller extends \yii\web\Controller
    /**
     * Declares the allowed HTTP verbs.
     * Please refer to [[VerbFilter::actions]] on how to declare the allowed verbs.
     * @return array the allowed HTTP verbs.
     */
    protected function verbs()
    {
        return [];
    }

?? why not get??
class VetoController extends AuthorizedAjaxController
{
    protected function verbs() {
        return [
            'veto' => ['post'],
        ];
    }

---------- 2016-08-09 20:30:20
/home/kidd/workspace/bc/MissionImpossible/controllers/ajax/VetoController.php
<?php
/**
 * Created by PhpStorm.
 * User: anhye
 * Date: 16-8-9
 * Time: 下午8:20
 */

namespace app\controllers\ajax;

use app\components\AppException;
use app\components\util\Logger;
use app\models\Checkin;
use app\models\Mission;
use app\models\Challenge;
use app\components\AccountManager;

class VetoController extends AuthorizedAjaxController
{
    protected function verbs() {
        return [
            'index' => ['post'],
        ];
    }

    public function actionVeto($cid=null)
    {
        Logger::error("action veto");
        if (is_null($cid)) {
            throw new AppException('参数错误');
        }
        $checkin = Checkin::findOne(['id' => $cid]);
        if (empty($checkin)) {
            throw new AppException('找不到打卡');
        }
        $challenge = Challenge::findOne(['id' => $checkin->challenge_id]);
        if (empty($challenge)) {
            throw new AppException('找不到挑战');
        }
        $mission = Mission::findOne(['id' => $challenge->mission_id]);
        if (empty($mission)) {
            throw new AppException('找不到任务');
        }

        $user = AccountManager::getCurrentUser();
        if( $user==null || $user->id != $mission->creator_id)
        {
            throw new AppException('无否决权');
//            return $this->render('checkin-detail-test.html', [
//                'checkin' => $checkin,
//                'challenge' => $challenge,
//                'mission' => $mission,
//                'user' => $user,
//                'cyAppId' => Changyan::getAppId(),
//                'cyConf' => Changyan::getConf(),
//                'errorStr' => '无否决权',
//            ]);
        }
        else {
            Logger::info("veto: set checkin creator id to ".$user->id."creator: ".$mission->creator_id);
            // update the checkin state
            $checkin->veto_admin_id = $user->id;
            $checkin->save();
        }

        return true;

//            $this->render('checkin-detail-test.html', [
//            'checkin' => $checkin,
//            'challenge' => $challenge,
//            'mission' => $mission,
//            'user' => $user,
//            'cyAppId' => Changyan::getAppId(),
//            'cyConf' => Changyan::getConf(),
//        ]);
    }
}

/home/kidd/workspace/bc/MissionImpossible/components/AppJsonResponseFormatter.php
<?php
/**
 * Created by PhpStorm.
 * User: dhu
 * Date: 16/4/5
 * Time: 15:35
 */

namespace app\components;


use yii\web\JsonResponseFormatter;

class AppJsonResponseFormatter extends JsonResponseFormatter
{
    public static function formateResponseData($data) {
        $data = is_object($data) ? (array)$data : $data;
        if (isset($data['name']) && strpos($data['name'], 'AppException') !== FALSE) {
            $new_data = [
                'success' => false,
                'message' => $data['message'],
            ];
        } else if (isset($data['type']) && strpos($data['type'], 'Exception') !== FALSE) {
            //不处理系统的异常
            return $data;
        } else {
            $new_data = [
                'success' => true,
                'message' => '',
                'data' => $data,
            ];
        }
        return $new_data;
    }

    public function format($response) {
        $response->data = static::formateResponseData($response->data);
        if ($response->getStatusCode() != 200 && $response->data['success'] == false) {
            $response->setStatusCode(200);
        }
        parent::format($response); // TODO: Change the autogenerated stub
    }

}


/home/kidd/workspace/bc/MissionImpossible/controllers/ajax/AuthorizedAjaxController.php
class AuthorizedAjaxController extends AjaxController
{
    public function init()
    {
        parent::init();
        if (\Yii::$app->user->isGuest) {
            throw new UnauthorizedHttpException();
        }
    }

    protected function getUserId() {
        return \Yii::$app->user->id;
    }
}

/home/kidd/workspace/bc/MissionImpossible/controllers/ajax/AjaxController.php
class AjaxController extends \yii\rest\Controller {

    public function behaviors()
    {
        $request = \Yii::$app->request;
        $request->parsers = [
            'application/json' => 'yii\web\JsonParser',
        ];
        $response = \Yii::$app->response;
        $response->formatters = [
            Response::FORMAT_JSON => 'app\components\AppJsonResponseFormatter',
            Response::FORMAT_JSONP => [
                'class' => 'app\components\AppJsonResponseFormatter',
                'useJsonp' => true
            ],
        ];
        $behaviors = parent::behaviors();
        //强制返回JSON的格式
        $behaviors['contentNegotiator']['formats']['text/html']
            = Response::FORMAT_JSON;
        $behaviors['contentNegotiator']['formats']['application/xml']
            = Response::FORMAT_JSON;

        return $behaviors;
    }
}


