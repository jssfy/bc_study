

----------- 2017-06-06 14:30:01



---------- 2016-11-21 19:41:41
curl get/post

$ curl -l -H "Content-type: application/json" -d '{"phone":"13521389587","password":"test"}' http://localhost:9080/api/v1/wind/result
  the above call works for 
/home/kidd/workspace/abc/apes/src/main/java/com/abcft/apes/controllers/WindController.java
    @POST
    @Path("result")
    @Consumes(MediaType.APPLICATION_JSON)
    @Produces(MediaType.APPLICATION_JSON)
    public static JsonObject result(
            JsonObject body
    ) { // call back for wind response

curl -l -H "Content-type: application/json" -d '{"type":"13521389587","type":"test"}' http://localhost:9080/api/v2/template/save

$ curl -X POST http://localhost:9080/api/v2/template/delete?id=583bf55439c6627c10a6a2ac
{
    "tid":"583bf55439c6627c10a6a2ac",
    "success":true,
    "message":"ok"
}

curl -X post http://localhost:9080/api/v2/company/send-code?phone=15611267534

curl -d '{"type":"13521389587","name":"test"}' -X post http://localhost:9080/api/v2/company/create?code=2468

curl -d "name=value&name2=value2" http://www.baidu.com #post数据

pass array to php:
$ curl -d "person[name]=kidd&age=100" http://frontend.tz8/wevote/test/test

        $person = SessionTool::getParaByKeyFromPostRequest('person');
        return 'name is: ' . $person['name'];

        $person = SessionTool::getParaByKeyFromPostRequest('person');
        return 'name is: ' . Json::encode($person);
$ curl -d "person[]=kidd&person[]=jssfy&age=100" http://frontend.tz8/wevote/test/test
name is: ["kidd","jssfy"]


---------- 2016-11-21 19:14:50
http://blog.csdn.net/blueheart20/article/details/45174399

在Http请求中，我们每天都在使用Content-type来指定不同格式的请求信息，但是却很少有人去全面了解content-type中允许的值有多少，这里将讲解Content-Type的可用值，以及在Spring MVC中如何使用它们来映射请求信息。

1.  Content-Type

  MediaType，即是Internet Media Type，互联网媒体类型；也叫做MIME类型，在Http协议消息头中，使用Content-Type来表示具体请求中的媒体类型信息。
[html] view plain copy
在CODE上查看代码片派生到我的代码片

    类型格式：type/subtype(;parameter)? type  
    主类型，任意的字符串，如text，如果是*号代表所有；   
    subtype 子类型，任意的字符串，如html，如果是*号代表所有；   
    parameter 可选，一些参数，如Accept请求头的q参数， Content-Type的 charset参数。   

 例如： Content-Type: text/html;charset:utf-8;

 常见的媒体格式类型如下：

        text/html ： HTML格式
        text/plain ：纯文本格式     
        text/xml ：  XML格式
        image/gif ：gif图片格式   
        image/jpeg ：jpg图片格式
        image/png：png图片格式

   以application开头的媒体格式类型：

       application/xhtml+xml ：XHTML格式
       application/xml     ： XML数据格式
       application/atom+xml  ：Atom XML聚合格式   
       application/json    ： JSON数据格式
       application/pdf       ：pdf格式 
       application/msword  ： Word文档格式
       application/octet-stream ： 二进制流数据（如常见的文件下载）
       application/x-www-form-urlencoded ： <form encType=””>中默认的encType，form表单数据被编码为key/value格式发送到服务器（表单默认的提交数据的格式）

   另外一种常见的媒体格式是上传文件之时使用的：

        multipart/form-data ： 需要在表单中进行文件上传时，就需要使用该格式

     以上就是我们在日常的开发中，经常会用到的若干content-type的内容格式。


--------- 2016-11-18 15:46:38
post test:

  <form action="/api/v1/wind/pp" method="post">
    <p>First name: <input type="text" name="fname" /></p>
    <p>Last name: <input type="text" name="lname" /></p>
    <input type="submit" value="Submit" />
  </form>

curl:
https://my.oschina.net/u/232595/blog/393699
curl -d "leaderboard_id=7778a8143f111272&score=19&app_key=8d49f16fe034b98b&_test_user=test01" "http://10.12.0.36:9080/api/v1/wind/pp"

fails if json is required:
  $ curl -d "leaderboard_id=7778a8143f111272&score=19&app_key=8d49f16fe034b98b&_test_user=test01" "http://10.12.0.36:9080/api/v1/wind/result"
  <html>
  <head>
  <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"/>
  <title>Error 415 Unsupported Media Type</title>
  </head>
  <body><h2>HTTP ERROR 415</h2>
  <p>Problem accessing /api/v1/wind/result. Reason:
  <pre>    Unsupported Media Type</pre></p><hr /><i><small>Powered by Jetty://</small></i><br/>

curl -i -H 'content-type: application/json' -X POST -d '{\"screencast\":{\"subject\":\"tools\"}}' "http://10.12.0.36:9080/api/v1/wind/result"

-----------2016-11-17 14:51:06
用java的jar命令打war包
  jar -cvf ch02.war  * 
将当前目录下所有的子目录和文件都打包成一个ch02.war的归档文件下。注意，后面的星号（*）是指定文件
清单用的。比如当前目录下包含源代码目录src、index.jsp和WEB-INF目录，我们可以这样打包：
  jar -cvf ch02.war index.jsp WEB-INF/  

------------2016-11-16 18:06:06
servlet from scratch:

http://blackchocolate.iteye.com/blog/1876845

如果按照本流程，一定可以完成自己的第一个servlet程序。
   首先Tomcat要安装好，在Tomcat的webapps文件夹下建立自己的项目，我这里取名为my，按照servlet的规则，项目下必须有一个名为WEB-INF的文件夹，WEB-INF的文件夹下必须有一个名为web.xml的文件，其次如果有jar包需要引用的话，要把jar包放到一个叫lib的文件夹里，lib文件夹也放到WEB-INF下，WEB-INF下还可以有classes文件夹，classes文件夹里是一些编译好的字节码。其次如果项目里还有静态页面，静态页面应该放到WEB-INF的外面。 

~/software/apache-tomcat-7.0.72/webapps/raw
$ tree
.
└── WEB-INF
    ├── classes
    │   └── HelloServlet.class
    ├── lib
    └── web.xml

3 directories, 2 files

web.xml
<?xml version="1.0" encoding="ISO-8859-1"?>

<web-app xmlns="http://java.sun.com/xml/ns/j2ee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd"
    version="2.4">
  <servlet>
    <servlet-name>ThreeParams</servlet-name>
    <servlet-class>HelloServlet</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>ThreeParams</servlet-name>
    <url-pattern>/hello</url-pattern>
  </servlet-mapping>
</web-app> 

HelloServlet.java [built from idea include the servlet jar if necessary, and copy the class directly to tomcat_home/webapps, not necessary to copy over the servlet-api.jar]
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;

public class HelloServlet extends HttpServlet {

    private static final long serialVersionUID = -965262014458195774L;

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp)throws ServletException, IOException {
        PrintWriter out = resp.getWriter();
        out.println("<html><head></head><body><center><font color='red'>Hello World Servlet!</font></center></body></html>");
        out.flush();
        out.close();
    }
}

without servlet-mapping, another way as below: [removing servlet-mapping from web.xml does not take effect before restarting tomcat]

import javax.servlet.annotation.WebServlet;

@WebServlet("/hello")
public class HelloServlet extends HttpServlet {

    private static final long serialVersionUID = -965262014458195774L;

    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp)throws ServletException, IOException {
        PrintWriter out = resp.getWriter();
        out.println("<html><head></head><body><center><font color='red'>Hello World Servlet!</font></center></body></html>");
        out.flush();
        out.close();
    }
}

to add servlet-api.jar, 
  project structure -> libraries -> + -> java -> browser to the jar file.
  remember to select the corresponding module, otherwise the dependencies is not applied and compiling still fails.

---------- 2016-11-17 18:21:49
WebServlet
大家用过@WebServlet("/Demo")这种方式写Servlet吗？
http://bbs.csdn.net/topics/360202758?page=1
问题出在你的配置。一旦用了Servlet3.0，就不能写web.xml。 
如果你写了web.xml，检查<web-app> 有一个 metadata-complete，是否为true，如果为true,改成false 
tomcat7才会支持annotation

@WebServlet 用于将一个类声明为 Servlet，该注解将会在部署时被容器处理，容器将根据具体的属性配置将相应的类部署为 Servlet。

http://elim.iteye.com/blog/2013691
