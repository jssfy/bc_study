

------------ 2016-11-21 19:56:50
https://jersey.java.net/documentation/latest/user-guide.html#getting-started

mvn archetype:generate -DarchetypeArtifactId=jersey-quickstart-grizzly2 \
-DarchetypeGroupId=org.glassfish.jersey.archetypes -DinteractiveMode=false \
-DgroupId=com.jssfy -DartifactId=simple-jersey -Dpackage=com.jssfy \
-DarchetypeVersion=2.24

1.5. Creating a Web Application that can be deployed on Heroku

To create a Web Application that can be either packaged as WAR and deployed in a Servlet container or that can be pushed and deployed on Heroku the process is very similar to the one described in Section 1.4, “Creating a JavaEE Web Application”. To create the new web application skeleton project, execute the following Maven command in the directory where the new project should reside:

mvn archetype:generate -DarchetypeArtifactId=jersey-heroku-webapp \
                -DarchetypeGroupId=org.glassfish.jersey.archetypes -DinteractiveMode=false \
                -DgroupId=com.example -DartifactId=simple-heroku-webapp -Dpackage=com.example \
                -DarchetypeVersion=2.24


------------ 2016-11-22 10:58:38
dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'
    compile 'org.glassfish.jersey.core:jersey-server:2.24'
    compile 'org.glassfish.jersey.containers:jersey-container-servlet:2.24'
    testCompile 'org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-jetty:2.24'
    compile 'org.glassfish.jersey.media:jersey-media-json-processing:2.24'
    compile 'org.glassfish.jersey.media:jersey-media-multipart:2.24'
}


-------- 2016-11-22 13:10:51
jersey gradle:

http://stackoverflow.com/questions/27889631/jersey-restful-web-service-gradle-setup

https://github.com/nobuoka/jax-rs-jersey-application-sample



----------- 2016-11-22 13:20:18
the below code can be run on jetty:
  use idea to create a jetty config and run on it.
https://github.com/ziroby/jetty-gradle-hello-world

but not on tomcat

web.xml:
<?xml version="1.0" encoding="UTF-8"?>
<!-- This web.xml file is not required when using Servlet 3.0 container,
     see implementation details http://jersey.java.net/nonav/documentation/latest/jax-rs.html -->
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
    <servlet>
        <servlet-name>Jersey Web Application</servlet-name>
        <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>
        <init-param>
            <param-name>javax.ws.rs.Application</param-name>
            <param-value>com.jssfy.MyApplication</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>Jersey Web Application</servlet-name>
        <url-pattern>/webapi/*</url-pattern>
    </servlet-mapping>
</web-app>

HelloWebapp.java
package com.jssfy;

import javax.ws.rs.GET;
import javax.ws.rs.Path;

@Path("/hello")
public class HelloWebapp {
    private static HelloWorldService helloWorldService = new HelloWorldService();

    @GET()
    public String hello() {
        return helloWorldService.sayHello();
    }
}

build.gradle
apply plugin: 'java'
apply plugin: 'jetty'
apply plugin: 'eclipse'

repositories {
    mavenCentral()
}
dependencies {
    testCompile 'junit:junit:4.11'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    compile 'org.glassfish.jersey.containers:jersey-container-servlet:2.14'
}
test {
    exclude '**/*IntegrationTest*'
}

task integrationTest(type: Test) {
    include '**/*IntegrationTest*'
    doFirst {
        jettyRun.contextPath = '/';
        jettyRun.httpPort = 8080    // Port for test
        jettyRun.daemon = true
        jettyRun.execute()
    }
    doLast {
        jettyStop.stopPort = 8091   // Port for stop signal
        jettyStop.stopKey = 'stopKey'
        jettyStop.execute()
    }
}


building artifact and copy the war file to tomcat/webapps/hello.war, then it is accessible via:
  http://localhost:8080/hello/hello

---------- 2016-11-22 14:42:21
weird! below jersey resource can be accessed via either http://localhost:8080/hello/api/hi or http://localhost:8080/hello/hi, which means without web.xml, it still works.

~/software/apache-tomcat-7.0.72/webapps
$ tree hello
hello
├── META-INF
│   └── MANIFEST.MF
└── WEB-INF
    ├── classes
    │   └── com
    │       └── jssfy
    │           ├── HelloWebapp.class
    │           ├── HelloWorldService.class
    │           ├── MyApplication.class
    │           └── MyResource.class
    ├── index.html
    ├── lib
    │   ├── aopalliance-repackaged-2.4.0-b06.jar
    │   ├── hk2-api-2.4.0-b06.jar
    │   ├── hk2-locator-2.4.0-b06.jar
    │   ├── hk2-utils-2.4.0-b06.jar
    │   ├── javassist-3.18.1-GA.jar
    │   ├── javax.annotation-api-1.2.jar
    │   ├── javax.inject-1.jar
    │   ├── javax.inject-2.4.0-b06.jar
    │   ├── javax.ws.rs-api-2.0.1.jar
    │   ├── jersey-client-2.14.jar
    │   ├── jersey-common-2.14.jar
    │   ├── jersey-container-servlet-2.14.jar
    │   ├── jersey-container-servlet-core-2.14.jar
    │   ├── jersey-guava-2.14.jar
    │   ├── jersey-server-2.14.jar
    │   ├── osgi-resource-locator-1.0.1.jar
    │   └── validation-api-1.1.0.Final.jar
    └── web.xml

6 directories, 24 files


