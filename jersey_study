


------------- 2016-11-29 19:42:03
    @GET
    @Path("v2/report/export")
    @Produces({"application/docx"})
    public Response export(
            @NotNull @QueryParam("id") String id
    ){
        try {
            String filePath = WordUtil.exportDoc(id);
            File exportFile = new File(filePath);
            if(!exportFile.exists()) {
                logger.warn(exportFile.getAbsolutePath() + " not found");
                return Response.status(Response.Status.NOT_FOUND).build();
            }

            Response.ResponseBuilder response = Response.ok()
                    .entity(exportFile)
                    .type("application/docx");

            response.header("Content-Disposition", "attachment; filename=" + URLEncoder.encode(exportFile.getName(), "UTF-8"));
            return response.build();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return Response.status(Response.Status.NOT_FOUND).build();
    }
    
---------- 2016-11-29 17:11:01
    @RolesAllowed({"admin", "user"})
    @POST
    @Path("v2/template/import")
    @Consumes(MediaType.MULTIPART_FORM_DATA)
    @Produces(MediaType.APPLICATION_JSON)
    public JsonObject upload(
            @FormDataParam("files") FormDataBodyPart bodyPart
    ) {
        JsonObject userJson = getCurrentUser();
        try {
            for (BodyPart part : bodyPart.getParent().getBodyParts()) {
                ContentDisposition contentDisposition = part.getContentDisposition();
                String fileName = FileUtil.getFileName(contentDisposition);
                MongoUtil.saveTemplate(fileName, userJson);
            }
            return BaseController.getResponse(true);
        } catch (Exception e) {
            return BaseController.getResponse(false);
        }
    }

    /home/kidd/.gradle/caches/modules-2/files-2.1/org.glassfish.jersey.media/jersey-media-multipart/2.24/528dd2b1ce7f16440717556c8c30d5610f693629/jersey-media-multipart-2.24-sources.jar!/org/glassfish/jersey/media/multipart/ContentDisposition.java

------------ 2016-11-21 19:56:50
https://jersey.java.net/documentation/latest/user-guide.html#getting-started

mvn archetype:generate -DarchetypeArtifactId=jersey-quickstart-grizzly2 \
-DarchetypeGroupId=org.glassfish.jersey.archetypes -DinteractiveMode=false \
-DgroupId=com.jssfy -DartifactId=simple-jersey -Dpackage=com.jssfy \
-DarchetypeVersion=2.24

1.5. Creating a Web Application that can be deployed on Heroku

To create a Web Application that can be either packaged as WAR and deployed in a Servlet container or that can be pushed and deployed on Heroku the process is very similar to the one described in Section 1.4, “Creating a JavaEE Web Application”. To create the new web application skeleton project, execute the following Maven command in the directory where the new project should reside:

mvn archetype:generate -DarchetypeArtifactId=jersey-heroku-webapp \
                -DarchetypeGroupId=org.glassfish.jersey.archetypes -DinteractiveMode=false \
                -DgroupId=com.example -DartifactId=simple-heroku-webapp -Dpackage=com.example \
                -DarchetypeVersion=2.24


------------ 2016-11-22 10:58:38
dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'
    compile 'org.glassfish.jersey.core:jersey-server:2.24'
    compile 'org.glassfish.jersey.containers:jersey-container-servlet:2.24'
    testCompile 'org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-jetty:2.24'
    compile 'org.glassfish.jersey.media:jersey-media-json-processing:2.24'
    compile 'org.glassfish.jersey.media:jersey-media-multipart:2.24'
}


-------- 2016-11-22 13:10:51
jersey gradle:

http://stackoverflow.com/questions/27889631/jersey-restful-web-service-gradle-setup

https://github.com/nobuoka/jax-rs-jersey-application-sample



----------- 2016-11-22 13:20:18
the below code can be run on jetty:
  use idea to create a jetty config and run on it.
https://github.com/ziroby/jetty-gradle-hello-world

but not on tomcat

web.xml:
<?xml version="1.0" encoding="UTF-8"?>
<!-- This web.xml file is not required when using Servlet 3.0 container,
     see implementation details http://jersey.java.net/nonav/documentation/latest/jax-rs.html -->
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
    <servlet>
        <servlet-name>Jersey Web Application</servlet-name>
        <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>
        <init-param>
            <param-name>javax.ws.rs.Application</param-name>
            <param-value>com.jssfy.MyApplication</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>Jersey Web Application</servlet-name>
        <url-pattern>/webapi/*</url-pattern>
    </servlet-mapping>
</web-app>

HelloWebapp.java
package com.jssfy;

import javax.ws.rs.GET;
import javax.ws.rs.Path;

@Path("/hello")
public class HelloWebapp {
    private static HelloWorldService helloWorldService = new HelloWorldService();

    @GET()
    public String hello() {
        return helloWorldService.sayHello();
    }
}

build.gradle
apply plugin: 'java'
apply plugin: 'jetty'
apply plugin: 'eclipse'

repositories {
    mavenCentral()
}
dependencies {
    testCompile 'junit:junit:4.11'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    compile 'org.glassfish.jersey.containers:jersey-container-servlet:2.14'
}
test {
    exclude '**/*IntegrationTest*'
}

task integrationTest(type: Test) {
    include '**/*IntegrationTest*'
    doFirst {
        jettyRun.contextPath = '/';
        jettyRun.httpPort = 8080    // Port for test
        jettyRun.daemon = true
        jettyRun.execute()
    }
    doLast {
        jettyStop.stopPort = 8091   // Port for stop signal
        jettyStop.stopKey = 'stopKey'
        jettyStop.execute()
    }
}


=======
https://medium.com/@jamsesso/starting-out-with-jersey-apache-tomcat-using-intellij-6338d93ffd40#.9qfo5iejt
JAX-RS is a Java API developed by Oracle. There are multiple reference implementations of this API including Jersey, Apache CXF, RESTeasy, etc…
Jersey, as previously stated, is a reference implementation of the JAX-RS 2.0 API. Jersey is extensible and provides additional functionality to the API.




-------- 2016-11-21 00:37:10

http://localhost:8080/rest/hello

http://blog.csdn.net/kkkloveyou/article/details/21391033
一、环境
1. idea
2. Tomcat 7
3. Jersey 2.7  下载地址（ https://jersey.java.net/download.html）

解压jaxrs-ri-2.7，
将api、ext、lib文件夹下的jar包都放到项目的lib下

lib is set in project structure -> libraries for the corresponding module. and lib folder it exported to WEB-INF/lib during deploying.

├── out
│   └── artifacts
│       └── gradle_jersey
│           └── exploded
│               └── gradle_jersey-1.0-SNAPSHOT.war
│                   ├── index.jsp
│                   └── WEB-INF
│                       ├── classes
│                       │   └── com
│                       │       └── jssfy
│                       │           └── HelloResource.class
│                       ├── lib
│                       │   ├── aopalliance-repackaged-2.5.0-b05.jar
│                       │   ├── hk2-api-2.5.0-b05.jar
│                       │   ├── hk2-locator-2.5.0-b05.jar
│                       │   ├── hk2-utils-2.5.0-b05.jar
│                       │   ├── javassist-3.20.0-GA.jar
│                       │   ├── javax.annotation-api-1.2.jar
│                       │   ├── javax.inject-2.5.0-b05.jar
│                       │   ├── javax.servlet-api-3.0.1.jar
│                       │   ├── javax.ws.rs-api-2.0.1.jar
│                       │   ├── jaxb-api-2.2.7.jar
│                       │   ├── jersey-client.jar
│                       │   ├── jersey-common.jar
│                       │   ├── jersey-container-servlet-core.jar
│                       │   ├── jersey-container-servlet.jar
│                       │   ├── jersey-guava-2.24.jar
│                       │   ├── jersey-media-jaxb.jar
│                       │   ├── jersey-server.jar
│                       │   ├── org.osgi.core-4.2.0.jar
│                       │   ├── osgi-resource-locator-1.0.1.jar
│                       │   ├── persistence-api-1.0.jar
│                       │   └── validation-api-1.1.0.Final.jar
│                       └── web.xml


HelloResource.java
package com.jssfy;

/**
 * Created by kidd on 16-11-21.
 */
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.PathParam;
import javax.ws.rs.core.MediaType;


@Path("/hello")
public class HelloResource {
    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String sayHello() {
        return "Hello World!" ;
    }
    
    @GET
    @Path("/{param}")
    @Produces("text/plain;charset=UTF-8")
    public String sayHelloToUTF8(@PathParam("param") String username) {
        System.out.println("hello console test");
        return "Hello " + username;
    }

}

web.xml
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
         version="3.1">
    <servlet>
        <servlet-name>Way REST Service</servlet-name>
        <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>
        <init-param>
            <param-name>jersey.config.server.provider.packages</param-name>
            <param-value>com.jssfy</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>Way REST Service</servlet-name>
        <url-pattern>/rest/*</url-pattern>
    </servlet-mapping>
</web-app>


--------- 2016-11-20 23:57:38
Nov 20, 2016 11:56:22 PM com.sun.jersey.api.core.ScanningResourceConfig logClasses
INFO: Root resource classes found:
  class com.jssfy.HelloWorld
  class com.jssfy.Books
Nov 20, 2016 11:56:22 PM com.sun.jersey.api.core.ScanningResourceConfig init
INFO: No provider classes found.
Nov 20, 2016 11:56:22 PM com.sun.jersey.server.impl.application.WebApplicationImpl _initiate
INFO: Initiating Jersey application, version 'Jersey: 1.19 02/11/2015 05:39 AM'



-------- 2016-11-20 14:35:58
org.glassfish.jersey.servlet.ServletContainer
com.sun.jersey.spi.container.servlet.ServletContainer

----------------2016-11-20 10:24:30
http://blog.csdn.net/zwlforever/article/details/45647733

REST是一种跨平台、跨语言的架构风格，RESTful Web Service是REST风格在Web领域的实现，JAX-RS标准是Java语言对RESTful Web Service的规范，Jersey是JAX-RS的参考实现，也是Java EE参考实现项目GlassFish的子项目；REST架构风格中各种抽象对象被描述为资源，资源的瞬时状态称为representation且可用XML/JSON/Atom等格式表示。RESTful Web Servcie也可以分解为类似MVC的三层结构，即资源、业务和数据访问对象，资源位于最前端用于接收请求和返回响应；JAX-RS2.0中定义的标准方法包括DELETE、GET、HEAD、OPTIONS、POST和PUT。


---------- 2016-11-20 14:05:16
http://www.cnblogs.com/puyangsky/p/5368132.html

created a gradle java webapp with idea:

build.gradle

group 'com.jssfy'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'war'

sourceCompatibility = 1.5

repositories {
    jcenter()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'
    compile group:'org.glassfish.jersey.containers',name:'jersey-container-grizzly2-http',version:'2.17'
    compile group:'org.glassfish.jersey.media',name:'jersey-media-json-jackson',version:'2.17'
    compile group:'org.mortbay.jetty',name:'jetty',version:'6.1.26'
    compile group: 'com.sun.jersey', name: 'jersey-bundle', version: '1.19'
}

HelloWorld.java
package com.jssfy;

/**
 * Created by kidd on 16-11-20.
 */
import javax.ws.rs.*;

//Path注解来设置url访问路径
@Path("/hello")
public class HelloWorld {
    @GET
    @Produces("text/plain")
    public String getString() {
        return "hello jersey!";
      }
    }

    
building artifact and copy the war file to tomcat/webapps/hello.war, then it is accessible via:
  http://localhost:8080/hello/hello

---------- 2016-11-22 14:42:21
weird! below jersey resource can be accessed via either http://localhost:8080/hello/api/hi or http://localhost:8080/hello/hi, which means without web.xml, it still works.

~/software/apache-tomcat-7.0.72/webapps
$ tree hello
hello
├── META-INF
│   └── MANIFEST.MF
└── WEB-INF
    ├── classes
    │   └── com
    │       └── jssfy
    │           ├── HelloWebapp.class
    │           ├── HelloWorldService.class
    │           ├── MyApplication.class
    │           └── MyResource.class
    ├── index.html
    ├── lib
    │   ├── aopalliance-repackaged-2.4.0-b06.jar
    │   ├── hk2-api-2.4.0-b06.jar
    │   ├── hk2-locator-2.4.0-b06.jar
    │   ├── hk2-utils-2.4.0-b06.jar
    │   ├── javassist-3.18.1-GA.jar
    │   ├── javax.annotation-api-1.2.jar
    │   ├── javax.inject-1.jar
    │   ├── javax.inject-2.4.0-b06.jar
    │   ├── javax.ws.rs-api-2.0.1.jar
    │   ├── jersey-client-2.14.jar
    │   ├── jersey-common-2.14.jar
    │   ├── jersey-container-servlet-2.14.jar
    │   ├── jersey-container-servlet-core-2.14.jar
    │   ├── jersey-guava-2.14.jar
    │   ├── jersey-server-2.14.jar
    │   ├── osgi-resource-locator-1.0.1.jar
    │   └── validation-api-1.1.0.Final.jar
    └── web.xml

6 directories, 24 files

=======
StartEntity.java
package com.jssfy;

/**
 * Created by kidd on 16-11-20.
 */

import com.sun.jersey.api.core.PackagesResourceConfig;
import com.sun.jersey.spi.container.servlet.ServletContainer;
import org.mortbay.jetty.Server;
import org.mortbay.jetty.servlet.Context;
import org.mortbay.jetty.servlet.ServletHolder;

/**
 * Created by user01 on 2016/4/8.com.sun.jersey.api.core
 */
public class StartEntity {
    public static void main(String[] args) {
        Server server = new Server(8090); // 端口号，可以自己设置
        ServletHolder sh = new ServletHolder(ServletContainer.class);
        sh.setInitParameter("com.sun.jersey.config.property.resourceConfigClass", PackagesResourceConfig.class.getCanonicalName());
        sh.setInitParameter("com.sun.jersey.config.property.packages", "com.jssfy"); // 需要你自己修改的，即第一个HelloWorld.java所在的包名。
        //start server
        Context context = new Context(server, null);
        context.addServlet(sh, "/*");
        try {
            server.start();
            server.join();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }
}

点击右键，Run "StartEntity.main()" 
在浏览器中访问http://localhost:8090/hello，或使用IntelliJ中的Test RESTful Web Service
http://localhost:8090/hello
>>>>>>> Stashed changes

