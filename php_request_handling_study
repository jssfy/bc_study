
因为引导工作必须在处理每一次请求之前都进行一遍， 因此让该过程尽可能轻量化就异常重要，请尽可能地优化这一步骤。


-------- 2016-08-01 15:56:38

http://localhost/php.php
/var/www/html/yii/basic/web
$ ls
assets  favicon.ico  index-test.php  robots.txt
css     index.php    php.php         wx_sample.php

/etc/apache2/sites-enabled/000-default.conf
DocumentRoot /var/www/html/yii/basic/web

------------ 2016-07-29 18:53:11
http://www.yiichina.com/doc/guide/2.0/runtime-bootstrapping

启动引导（Bootstrapping）

启动引导是指：在应用开始解析并处理新接受请求之前，一个预先准备环境的过程。 启动引导会在两个地方具体进行：入口脚本(Entry Script) 和 应用主体（application）。

在入口脚本里，需注册各个类库的类文件自动加载器（Class Autoloader，简称自动加载器）。 这主要包括通过其 autoload.php 文件加载的Composer 自动加载器，以及通过 Yii 类加载的 Yii 自动加载器。之后， 入口脚本会加载应用的配置（configuration）并创建一个 应用主体 的实例。

在应用主体的构造函数中，会执行以下引导工作：

    调用 yii\base\Application::preInit()（预初始化）方法，配置一些高优先级的应用属性， 比如 yii\base\Application::basePath 属性。
    注册yii\base\Application::errorHandler。
    通过给定的应用配置初始化应用的各属性。
    通过调用 yii\base\Application::init()（初始化）方法，它会顺次调用 yii\base\Application::bootstrap() 从而运行引导组件。
        加载扩展清单文件(extension manifest file) vendor/yiisoft/extensions.php。
        创建并运行各个扩展声明的 引导组件（bootstrap components）。
        创建并运行各个 应用组件 以及在应用的 Bootstrap 属性中声明的各个 模块（modules）组件（如果有）。

因为引导工作必须在处理每一次请求之前都进行一遍， 因此让该过程尽可能轻量化就异常重要，请尽可能地优化这一步骤。

请尽量不要注册太多引导组件。只有他需要在 HTTP 请求处理的全部生命周期中都作用时才需要使用它。 举一个用到它的范例：一个模块需要注册额外的 URL 解析规则，就应该把它列在应用的 bootstrap 属性之中， 这样该 URL 解析规则才能在解析请求之前生效。 （译注：换言之，为了性能需要，除了 URL 解析等少量操作之外，绝大多数组件都应该按需加载，而不是都放在引导过程中。）

在生产环境中，可以开启字节码缓存，比如 APC， 来进一步最小化加载和解析 PHP 文件所需的时间。

一些大型应用都包含有非常复杂的应用配置， 它们会被分割到许多更小的配置文件中。 此时，可以考虑将整个配置数组缓存起来， 并在入口脚本创建应用实例之前直接从缓存中加载。

/var/www/html/yii/basic/vendor/yiisoft/yii2/base/Application.php

    /**
     * Constructor.
     * @param array $config name-value pairs that will be used to initialize the object properties.
     * Note that the configuration must contain both [[id]] and [[basePath]].
     * @throws InvalidConfigException if either [[id]] or [[basePath]] configuration is missing.
     */
    public function __construct($config = [])
    {
        Yii::$app = $this;
        static::setInstance($this);

        $this->state = self::STATE_BEGIN;

        $this->preInit($config);

        $this->registerErrorHandler($config);

        Component::__construct($config);
    }


-------------- 2016-07-29 19:21:47
http://www.yiichina.com/doc/guide/2.0/runtime-routing
路由

当入口脚本在调用 yii\web\Application::run() 方法时，它进行的第一个操作就是解析输入的请求，然后实例化对应的控制器操作处理这个请求。 该过程就被称为引导路由（routing）。

The reverse process of routing is called URL creation, which creates a URL from a given route and the associated query parameters. When the created URL is later requested, the routing process can resolve it back into the original route and query parameters.

The central piece responsible for routing and URL creation is the yii\web\UrlManager, which is registered as the urlManager application component. The yii\web\UrlManager provides the yii\web\UrlManager::parseRequest() method to parse an incoming request into a route and the associated query parameters and the yii\web\UrlManager::createUrl() method to create a URL from a given route and its associated query parameters.

By configuring the urlManager component in the application configuration, you can let your application recognize arbitrary URL formats without modifying your existing application code.

URL Formats 
  The default URL format: /index.php?r=post/view&id=100
  The pretty URL format: /index.php/post/100
To use the pretty URL format, you will need to design a set of yii\web\UrlManager::rules according to the actual requirement about how the URLs should look like.

Routing involves two steps. In the first step, the incoming request is parsed into a route and the associated query parameters. In the second step, a controller action corresponding to the parsed route is created to handle the request.

缺省路由

如果传入请求并没有提供一个具体的路由，（一般这种情况多为于对首页的请求）此时就会启用由 yii\web\Application::defaultRoute 属性所指定的缺省路由。 该属性的默认值为 site/index，它指向 site 控制器的 index 操作。
class Application extends \yii\base\Application
{
    /**
     * @var string the default route of this application. Defaults to 'site'.
     */
    public $defaultRoute = 'site';

catchAll 路由（全拦截路由）

有时候，你会想要将你的 Web 应用临时调整到维护模式，所有的请求下都会显示相同的信息页。当然，要实现这一点有很多种方法。这里面最简单快捷的方法就是在应用配置中设置下 yii\web\Application::catchAll 属性
/var/www/html/yii/basic/vendor/yiisoft/yii2/web/Application.php
    /**
     * @var array the configuration specifying a controller action which should handle
     * all user requests. This is mainly used when the application is in maintenance mode
     * and needs to handle all incoming requests via a single action.
     * The configuration is an array whose first element specifies the route of the action.
     * The rest of the array elements (key-value pairs) specify the parameters to be bound
     * to the action. For example,
     *
     * ```php
     * [
     *     'offline/notice',
     *     'param1' => 'value1',
     *     'param2' => 'value2',
     * ]
     * ```
     *
     * Defaults to null, meaning catch-all is not used.
     */
    public $catchAll = [
        'country/index',
        'param1' => 'value1',
        'param2' => 'value2',
    ];

??
The route passed to the yii\helpers\Url::to() method is context sensitive. It can be either a relative route or an absolute route which will be normalized according to the following rules:

    If the route is an empty string, the currently requested yii\web\Controller::route will be used;
    If the route contains no slashes at all, it is considered to be an action ID of the current controller and will be prepended with the \yii\web\Controller::uniqueId value of the current controller;
    If the route has no leading slash, it is considered to be a route relative to the current module and will be prepended with the \yii\base\Module::uniqueId value of the current module.

URL Rules 

Performance Consideration

When developing a complex Web application, it is important to optimize URL rules so that it takes less time to parse requests and create URLs.

By using parameterized routes, you may reduce the number of URL rules, which can significantly improve performance.

When parsing or creating URLs, yii\web\UrlManager examines URL rules in the order they are declared. Therefore, you may consider adjusting the order of the URL rules so that more specific and/or more commonly used rules are placed before less used ones.

If some URL rules share the same prefix in their patterns or routes, you may consider using yii\web\GroupUrlRule so that they can be more efficiently examined by yii\web\UrlManager as a group. This is often the case when your application is composed by modules, each having its own set of URL rules with module ID as their common prefixes.

------------ 2016-07-29 20:01:03
http://www.yiichina.com/doc/guide/2.0/runtime-requests
一个应用的请求是用 yii\web\Request 对象来表示的，该对象提供了诸如 请求参数（译者注：通常是GET参数或者POST参数）、HTTP头、cookies等信息。 默认情况下，对于一个给定的请求，你可以通过 request application component 应用组件（yii\web\Request 类的实例） 获得访问相应的请求对象。

要获取请求参数，你可以调用 request 组件的 yii\web\Request::get() 方法和 yii\web\Request::post() 方法。 他们分别返回 $_GET 和 $_POST 的值。

请求方法

你可以通过 Yii::$app->request->method 表达式来获取当前请求使用的HTTP方法。 这里还提供了一整套布尔属性用于检测当前请求是某种类型。
$request = Yii::$app->request;

if ($request->isAjax) { /* 该请求是一个 AJAX 请求 */ }
if ($request->isGet)  { /* 请求方法是 GET */ }
if ($request->isPost) { /* 请求方法是 POST */ }
if ($request->isPut)  { /* 请求方法是 PUT */ }

请求URLs

request 组件提供了许多方式来检测当前请求的URL。

假设被请求的URL是 http://example.com/admin/index.php/product?id=100， 你可以像下面描述的那样获取URL的各个部分：

    yii\web\Request::url：返回 /admin/index.php/product?id=100, 此URL不包括host info部分。
    yii\web\Request::absoluteUrl：返回 http://example.com/admin/index.php/product?id=100, 包含host infode的整个URL。
    yii\web\Request::hostInfo：返回 http://example.com, 只有host info部分。
    yii\web\Request::pathInfo：返回 /product， 这个是入口脚本之后，问号之前（查询字符串）的部分。
    yii\web\Request::queryString：返回 id=100,问号之后的部分。
    yii\web\Request::baseUrl：返回 /admin, host info之后， 入口脚本之前的部分。
    yii\web\Request::scriptUrl：返回 /admin/index.php, 没有path info和查询字符串部分。
    yii\web\Request::serverName：返回 example.com, URL中的host name。
    yii\web\Request::serverPort：返回 80, 这是web服务中使用的端口。

    HTTP头

你可以通过 yii\web\Request::headers 属性返回的 yii\web\HeaderCollection 获取HTTP头信息。


请求组件也提供了支持快速访问常用头的方法，包括：

    yii\web\Request::userAgent：返回 User-Agent 头。
    yii\web\Request::contentType：返回 Content-Type 头的值， Content-Type 是请求体中MIME类型数据。
    yii\web\Request::acceptableContentTypes：返回用户可接受的内容MIME类型。 返回的类型是按照他们的质量得分来排序的。得分最高的类型将被最先返回。
    yii\web\Request::acceptableLanguages：返回用户可接受的语言。 返回的语言是按照他们的偏好层次来排序的。第一个参数代表最优先的语言。

    你可以通过 yii\web\Request::userHost 和 yii\web\Request::userIP 分别获取host name和客户机的IP地址， 例如，

$userHost = Yii::$app->request->userHost;
$userIP = Yii::$app->request->userIP;















