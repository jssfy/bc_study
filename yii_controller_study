



------------ 

--------- 2016-08-18 12:14:23

if $mt is '0', "$mt === MissionType::SINGLE" will fail

    public static function getMissionViewUrlPrifix($mt = 0) {
        $prifix =  ($mt == MissionType::SINGLE) ? 'single/' : 'week/';
        Logger::info("mt: ".$mt.", prifix: ".$prifix);

        return $prifix;
    }

----------- 2016-08-18 10:20:56

<form name="form3" method="post" action="/ajax/mission/create">
    announce: <input type="text" name="PeriodMission[announce]">
    type: <input type="text" name="mt">
    ticket: <input type="text" name="PeriodMission[ticket]">
    <input type="submit" name="button" id="btn3" value="PeriodMission">
</form>

PeriodMission[]
------ 2016-08-12 17:37:18
return $this->redirect(array(
                    'orderdone',
                    'oid' => $order->id,
                    'res' => true,
                ));
/home/kidd/workspace/bc/MissionImpossible/vendor/yiisoft/yii2/web/Controller.php
public function redirect($url, $statusCode = 302)                
     * @param string|array $url the URL to be redirected to. This can be in one of the following formats:
     *
     * - a string representing a URL (e.g. "http://example.com")
     * - a string representing a URL alias (e.g. "@example.com")
     * - an array in the format of `[$route, ...name-value pairs...]` (e.g. `['site/index', 'ref' => 1]`)
     *   [[Url::to()]] will be used to convert the array into a URL.
     *

--------- 2016-08-12 16:38:29
access control:

/home/kidd/workspace/bc/MissionImpossible/config/web.php
<?php

$params = require(__DIR__ . '/params.php');

$config = [
    'id' => 'basic',
    'basePath' => dirname(__DIR__),
    'language' => 'zh-CN',
  'timeZone' => 'Asia/Shanghai',
    'bootstrap' => [
        'log'
    ],
    'components' => [
        'request' => [
            // !!! insert a secret key in the following (if it is empty) - this is required by cookie validation
            'cookieValidationKey' => 'PsY08QqXQhQDRQbTmNWuqawEeAGzBcZI',
            'enableCookieValidation' => false,
            'enableCsrfValidation' => false,
        ],
        'cache' => [
            'class' => 'yii\caching\FileCache',
        ],
        'user' => [
            'identityClass' => 'app\models\Account',
            'enableAutoLogin' => true,
            'loginUrl' => '/login/login',
        ],

/home/kidd/workspace/bc/MissionImpossible/controllers/MissionController.php
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'rules' => [
                    [
                        'actions' => ['index', 'create', 'list', 'join', 'reward', 'order', 'orderdone', 'memberlist'],
                        'allow' => true,
                        'roles' => ['@'],
                    ],
                ],
            ]
        ];
    }

comment out the behaviors to enable access without login: 
  [as seen from fiddler proxy, accessing /mission/list or /mission/create, etc., will be redirected to /login/login]


and non-object access:
    public function actionIndex($mid = 0, $iid = null)
    {
        $user = AccountManager::getCurrentUser();
        $uid = $user->id;
        $mission = Mission::findOne(['id' => $mid]);
        $account = Account::findIdentity(194); //Yii::$app->user->id); for test reason, set it to 194
        Logger::error("account id: ".Yii::$app->user->id."\n");
        $subscribed = $account->subscribed === 1;

------------ 2016-08-10 10:24:50
support of post only, for action veto

class VetoController extends AuthorizedAjaxController
{
    protected function verbs() {
        return [
            'veto' => ['post'],
        ];
    }

    public function actionVeto()
    {
        $cid = SessionTool::getParaByKeyFromPostRequest('cid');

-------------- 2016-08-10 10:29:26
how to load post data:

1. 

-------------- 2016-08-07 19:00:25
路由

终端用户通过所谓的路由寻找到操作，路由是包含以下部分的字符串：

    模型ID: 仅存在于控制器属于非应用的模块;
    控制器ID: 同应用（或同模块如果为模块下的控制器） 下唯一标识控制器的字符串;
    操作ID: 同控制器下唯一标识操作的字符串。

路由使用如下格式:

ControllerID/ActionID

如果属于模块下的控制器，使用如下格式：

ModuleID/ControllerID/ActionID

如果用户的请求地址为 http://hostname/index.php?r=site/index, 会执行site 控制器的index 操作。 更多关于处理路由的详情请参阅 路由 一节。

在yii\web\Application网页应用中，控制器应继承yii\web\Controller 或它的子类。 同理在yii\console\Application控制台应用中，控制器继承yii\console\Controller 或它的子类。

通常情况下，控制器用来处理请求有关的资源类型， 因此控制器ID通常为和资源有关的名词。 例如使用article作为处理文章的控制器ID。

控制器ID应仅包含英文小写字母、数字、下划线、中横杠和正斜杠， 例如 article 和 post-comment 是真是的控制器 ID，article?, PostComment, admin\post不是控制器ID。

控制器Id可包含子目录前缀，例如 admin/article 代表 yii\base\Application::controllerNamespace控制器命名空间下 admin子目录中 article 控制器。 子目录前缀可为英文大小写字母、数字、下划线、正斜杠， 其中正斜杠用来区分多级子目录(如 panels/admin)。

e.g., 
/home/kidd/workspace/yii/basic/controllers/test/CountryController.php
  namespace app\controllers\test;
  class CountryController extends Controller
http://localhost:8081/index.php?r=test/country/index

控制器类命名

控制器ID遵循以下规则衍生控制器类名：

    将用正斜杠区分的每个单词第一个字母转为大写。注意如果控制器ID包含正斜杠， 只将最后的正斜杠后的部分第一个字母转为大写；
    去掉中横杠，将正斜杠替换为反斜杠;
    增加Controller后缀;
    在前面增加yii\base\Application::controllerNamespace控制器命名空间.

下面为一些示例，假设yii\base\Application::controllerNamespace 控制器命名空间为 app\controllers:

    article 对应 app\controllers\ArticleController;
    post-comment 对应 app\controllers\PostCommentController;
    admin/post-comment 对应 app\controllers\admin\PostCommentController;
    adminPanels/post-comment 对应 app\controllers\adminPanels\PostCommentController.

控制器类必须能被 自动加载，所以在上面的例子中， 控制器article 类应在 别名 为@app/controllers/ArticleController.php的文件中定义， 控制器admin/post-comment应在@app/controllers/admin/PostCommentController.php文件中。

    Info: 最后一个示例 admin/post-comment 表示你可以将控制器放在 yii\base\Application::controllerNamespace控制器命名空间下的子目录中， 在你不想用 模块 的情况下给控制器分类，这种方式很有用。


http://www.yiichina.com/doc/guide/2.0/structure-applications#application-configurations
控制器部署

可通过配置 yii\base\Application::controllerMap 来强制上述的控制器ID和类名对应， 通常用在使用第三方不能掌控类名的控制器上。

配置 应用配置 中的application configuration，如下所示：

[
    'controllerMap' => [
        // 用类名申明 "account" 控制器
        'account' => 'app\controllers\UserController',

        // 用配置数组申明 "article" 控制器
        'article' => [
            'class' => 'app\controllers\PostController',
            'enableCsrfValidation' => false,
        ],
    ],
]

默认控制器

每个应用有一个由yii\base\Application::defaultRoute属性指定的默认控制器；当请求没有指定 路由，该属性值作为路由使用。 对于yii\web\Application网页应用，它的值为 'site'， 对于 yii\console\Application控制台应用，它的值为 help， 所以URL为 http://hostname/index.php 表示由 site 控制器来处理。

可以在 应用配置 中修改默认控制器，如下所示：

[
    'defaultRoute' => 'main',
]


创建操作

创建操作可简单地在控制器类中定义所谓的 操作方法 来完成，操作方法必须是以action开头的公有方法。 操作方法的返回值会作为响应数据发送给终端用户

操作ID

操作通常是用来执行资源的特定操作，因此， 操作ID通常为动词，如view, update等。

操作ID应仅包含英文小写字母、数字、下划线和中横杠，操作ID中的中横杠用来分隔单词。 例如view, update2, comment-post是真实的操作 ID，view?, Update不是操作ID.

可通过两种方式创建操作ID，内联操作和独立操作. An inline action is 内联操作在控制器类中定义为方法；独立操作是继承yii\base\Action或它的子类的类。 内联操作容易创建，在无需重用的情况下优先使用； 独立操作相反，主要用于多个控制器重用， 或重构为扩展。
内联操作

内联操作指的是根据我们刚描述的操作方法。

操作方法的名字是根据操作ID遵循如下规则衍生：

    将每个单词的第一个字母转为大写;
    去掉中横杠;
    增加action前缀.

例如index 转成 actionIndex, hello-world 转成 actionHelloWorld。

    Note: 操作方法的名字大小写敏感，如果方法名称为ActionIndex不会认为是操作方法， 所以请求index操作会返回一个异常， 也要注意操作方法必须是公有的， 私有或者受保护的方法不能定义成内联操作。

因为容易创建，内联操作是最常用的操作， 但是如果你计划在不同地方重用相同的操作， 或者你想重新分配一个操作，需要考虑定义它为独立操作。
独立操作

独立操作通过继承yii\base\Action或它的子类来定义。 例如Yii发布的yii\web\ViewAction和yii\web\ErrorAction 都是独立操作。

要使用独立操作，需要通过控制器中覆盖yii\base\Controller::actions()方法在action map中申明， 如下例所示：

public function actions()
{
    return [
        // 用类来申明"error" 操作
        'error' => 'yii\web\ErrorAction',

        // 用配置数组申明 "view" 操作
        'view' => [
            'class' => 'yii\web\ViewAction',
            'viewPrefix' => '',
        ],
    ];
}

如上所示， actions() 方法返回键为操作ID、值为对应操作类名或数组configurations 的数组。 和内联操作不同，独立操作ID可包含任意字符， 只要在actions() 方法中申明.

为创建一个独立操作类，需要继承yii\base\Action 或它的子类，并实现公有的名称为run()的方法, run() 方法的角色和操作方法类似，例如：

<?php
namespace app\components;

use yii\base\Action;

class HelloWorldAction extends Action
{
    public function run()
    {
        return "Hello World";
    }
}

操作结果

操作方法或独立操作的run()方法的返回值非常重要， 它表示对应操作结果。

返回值可为 响应 对象，作为响应发送给终端用户。

    对于yii\web\Application网页应用，返回值可为任意数据, 它赋值给yii\web\Response::data， 最终转换为字符串来展示响应内容。
    对于yii\console\Application控制台应用，返回值可为整数， 表示命令行下执行的 yii\console\Response::exitStatus 退出状态。

在上面的例子中，操作结果都为字符串，作为响应数据发送给终端用户， 下例显示一个操作通过 返回响应对象（因为yii\web\Controller::redirect()方法返回一个响应对象） 可将用户浏览器跳转到新的URL。

public function actionForward()
{
    // 用户浏览器跳转到 http://example.com
    return $this->redirect('http://example.com');
}
>>>>>>> Stashed changes
操作参数

内联操作的操作方法和独立操作的 run() 方法可以带参数，称为操作参数。 参数值从请求中获取，对于yii\web\Application网页应用， 每个操作参数的值从$_GET中获得，参数名作为键； 对于yii\console\Application控制台应用, 操作参数对应命令行参数。

如下例，操作view (内联操作) 申明了两个参数 $id 和 $version。

namespace app\controllers;

use yii\web\Controller;

class PostController extends Controller
{
    public function actionView($id, $version = null)
    {
        // ...
    }
}

<<<<<<< Updated upstream
2.
/home/kidd/workspace/bc/MissionImpossible/controllers/MissionController.php
$data = Yii::$app->request->post();
        if ($mission->load($data) ) {


=======
操作参数会被不同的参数填入，如下所示：

    http://hostname/index.php?r=post/view&id=123: $id 会填入'123'， $version 仍为 null 空因为没有version请求参数;
    http://hostname/index.php?r=post/view&id=123&version=2: $id 和 $version 分别填入 '123' 和 '2'`；
    http://hostname/index.php?r=post/view: 会抛出yii\web\BadRequestHttpException 异常 因为请求没有提供参数给必须赋值参数$id；
    http://hostname/index.php?r=post/view&id[]=123: 会抛出yii\web\BadRequestHttpException 异常 因为$id 参数收到数字值 ['123']而不是字符串.

如果想让操作参数接收数组值，需要指定$id为array，如下所示：

public function actionView(array $id, $version = null)
{
    // ...
}

现在如果请求为 http://hostname/index.php?r=post/view&id[]=123, 参数 $id 会使用数组值['123']， 如果请求为 http://hostname/index.php?r=post/view&id=123， 参数 $id 会获取相同数组值，因为无类型的'123'会自动转成数组。

上述例子主要描述网页应用的操作参数，对于控制台应用， 更多详情请参阅控制台命令。

默认操作

每个控制器都有一个由 yii\base\Controller::defaultAction 属性指定的默认操作， 当路由 只包含控制器ID， 会使用所请求的控制器的默认操作。

默认操作默认为 index，如果想修改默认操作， 只需简单地在控制器类中覆盖这个属性，如下所示：

namespace app\controllers;

use yii\web\Controller;

class SiteController extends Controller
{
    public $defaultAction = 'home';

    public function actionHome()
    {
        return $this->render('home');
    }
}


控制器生命周期

处理一个请求时， 应用主体 会根据请求路由创建一个控制器， 控制器经过以下生命周期来完成请求：

    在控制器创建和配置后，yii\base\Controller::init() 方法会被调用。
    控制器根据请求操作ID创建一个操作对象:
        如果操作ID没有指定，会使用yii\base\Controller::defaultAction默认操作ID；
        如果在yii\base\Controller::actions()找到操作ID， 会创建一个独立操作；
        如果操作ID对应操作方法，会创建一个内联操作；
        否则会抛出yii\base\InvalidRouteException异常。
    控制器按顺序调用应用主体、模块（如果控制器属于模块）、 控制器的 beforeAction() 方法；
        如果任意一个调用返回false，后面未调用的beforeAction()会跳过并且操作执行会被取消； action execution will be cancelled.
        默认情况下每个 beforeAction() 方法会触发一个 beforeAction 事件，在事件中你可以追加事件处理操作；
    控制器执行操作:
        请求数据解析和填入到操作参数；
    控制器按顺序调用控制器、模块（如果控制器属于模块）、 应用主体的 afterAction() 方法；
        默认情况下每个 afterAction() 方法会触发一个 afterAction 事件，在事件中你可以追加事件处理操作；
    应用主体获取操作结果并赋值给响应.

最佳实践

在设计良好的应用中，控制器很精练，包含的操作代码简短； 如果你的控制器很复杂，通常意味着需要重构， 转移一些代码到其他类中。

归纳起来，控制器

    可访问 请求 数据;
    可根据请求数据调用 模型 的方法和其他服务组件;
    可使用 视图 构造响应;
    不应处理应被模型处理的请求数据;
    应避免嵌入HTML或其他展示代码，这些代码最好在 视图中处理.




http://www.yiichina.com/doc/guide/2.0/runtime-routing
  pretty url
>>>>>>> Stashed changes
