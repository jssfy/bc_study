mysql manual:
  http://dev.mysql.com/doc/refman/5.7/en/using-explain.html

?? which is more efficient: accessing db multiple times on different tables or by joining tables?


---------- 2016-11-08 16:11:54
http://www.linuxidc.com/Linux/2013-07/88032.htm
首先，对于精度比较高的东西，比如money，我会用decimal类型，不会考虑float,double,因为他们容易产生误差，numeric和decimal同义，numeric将自动转成decimal。
DECIMAL从MySQL 5.1引入，列的声明语法是DECIMAL(M,D)。在MySQL 5.1中，参量的取值范围如下：
·M是数字的最大数（精度）。其范围为1～65（在较旧的MySQL版本中，允许的范围是1～254），M 的默认值是10。
·D是小数点右侧数字的数目（标度）。其范围是0～30，但不得超过M。
说明：float占4个字节，double占8个字节，decimail(M,D)占M+2个字节。
如DECIMAL(5,2) 的最大值为9 9 9 9 . 9 9，因为有7 个字节可用。

if the left is too big, error. [left + right is no longer than M, and right is no longer than D]
if the right is too long, truncate.

mysql> INSERT INTO `wind_wsi` (`code`,`name`,`create_at`,`date`,`open`,`high`,`low`,`close`,`volume`,`amt`,`chg`,`pct_chg`) VALUES ("000001.SH","上证综指",NOW(),"2016-11-08 09:31:00","3140.967200","3140.967201","3140.967202","3140.967203","3140.967204","3140.967205","3140.967206","55555553140.967207151515151");
ERROR 1264 (22003): Out of range value for column 'pct_chg' at row 1

DROP TABLE IF EXISTS `wind_wsi_bak`;
CREATE TABLE `wind_wsi_bak` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `code` varchar(32) NOT NULL COMMENT '证券代码',
  `name` varchar(512) DEFAULT NULL COMMENT '证券名称',
  `create_at` timestamp NULL DEFAULT NULL,
  `date` datetime NOT NULL,
  `open` decimal(30, 20) DEFAULT 0 COMMENT '开盘价',
  `high` decimal(30, 20) DEFAULT 0 COMMENT '最高价',
  `low` decimal(30, 20) DEFAULT 0 COMMENT '最低价',
  `close` decimal(30, 20) DEFAULT 0 COMMENT '收盘价',
  `volume` decimal(30, 20) DEFAULT 0 COMMENT '成交量',
  `amt` decimal(30, 20) DEFAULT 0 COMMENT '成交额',
  `chg` decimal(30, 20) DEFAULT 0 COMMENT '涨跌',
  `pct_chg` decimal(30, 20) DEFAULT 0 COMMENT '涨跌幅',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

INSERT INTO `wind_wsi_bak`
(`code`,`name`,`create_at`,`date`,`open`,`high`,`low`,`close`,`volume`,`amt`,`chg`,`pct_chg`)
VALUES
("000001.SH","上证综指",NOW(),str_to_date("20161108 09:30:00",'%Y%m%d %H:%i:%s'),"3140.967200","3140.967201","3140.967202","3140.967203","3140.967204","3140.967205","3140.967206","3140.967207151515151");

----------- 2016-11-03 14:55:00
if not commented below commented lines, the lower part will cost 1 more second.

2016-11-03 14:52:05 [10.12.0.36][18][-][error][abc\backend\admin\components\PlazaManager::getMissionRecommendList] spent time ms: 32.968997955322 and 1388.1499767303

compared to:

2016-11-03 14:53:08 [10.12.0.36][18][-][error][abc\backend\admin\components\PlazaManager::getMissionRecommendList] spent time ms: 34.518003463745 and 5.1229000091553

            $midtime    = microtime(true);
            foreach ($missions as $mission) {
//                if ($mission->isStoped()) {
//                    continue;
//                }
//                if (is_null($mission->creator)) {
//                    continue;
//                }
                $data[] = [
                    'mid' => $mission->id,
                    'mt' => $mission->missiontype,
                    'name' => $mission->name,
//                    'creator_name' => $mission->creator->nickname,
                    'create_time' => $mission->create_time,
                    'announce' => $mission->announce,
                    'description' => $mission->description,
                    'start_time' => $mission->startTime,
                    'stop_time' => $mission->stopTime,
                    'ticket' => $mission->ticket,
                    'offical_recommend_time'=> $mission->offical_recommend_time,
                    'user_recommend_count'=> $mission->user_recommend_count,
                ];
            }
            $endTime    = microtime(true);
            $mid    = ($midtime - $startTime) * 1000; //将时间转换为毫秒
            $runtime    = ($endTime - $midtime) * 1000; //将时间转换为毫秒
            \frontend\components\util\Logger::error('spent time ms: ' . $mid . ' and ' . $runtime);
        }

--------- 2016-10-21 12:09:27

                Account::updateAll(
                    ['nickname' => $nickname, 'username' => $nickname, 'updated_at' => new \yii\db\Expression('NOW()')],
                    ['id' => $user->account_id]
                );

                
------------- 2016-10-21 10:14:45
mysql> select a.id, b.name, b.id from challenge as a, mission as b where a.mission_id = b.id and a.user_id=14;
+-----+---------------------------------------------------+-----+
| id  | name                                              | id  |
+-----+---------------------------------------------------+-----+
|  64 | 密云会议定时签到                                  |  54 |
|  80 | 挑战卷舌头                                        |  55 |
| 195 | 红包领取                                          |  29 |
| 245 | 分红包                                            |  47 |
| 247 | 一起测试吧                                        |  48 |
| 253 | 到了会场再打卡                                    | 185 |
| 255 | 夜晚的会议希望大家都能参与                        |  50 |
| 256 | 戎朋测试                                          |  51 |
| 332 | 夜晚的回忆希望                                    |  69 |
| 395 | 北京办公室庆中秋!                                 | 216 |
| 442 | 中秋欢乐家庭大趴体                                | 228 |
| 461 | 回到家打开封闭                                    | 242 |
| 462 | 回到家酒店                                        | 243 |
| 463 | 阿斯顿法国                                        | 244 |
| 527 | 散步                                              | 108 |
| 576 | 一                                                | 121 |
| 623 | 早餐挑战第一口造型-等你瓜分奖金池                 | 312 |
| 624 | 早起挑战-瓜分奖金池                               | 313 |
| 681 | 啊考虑考虑                                        | 140 |
+-----+---------------------------------------------------+-----+
19 rows in set (0.00 sec)

---------- 2016-10-19 21:14:43

alter table `card_base` add column `checkin_photo` varchar(1024) DEFAULT NULL;
alter table `card_base` add column `announce` varchar(64) DEFAULT NULL;


alter table `card_base` modify `checkin_photo` varchar(1024) DEFAULT NULL;
alter table 表名称 modify 字段名称 字段类型 [是否允许非空];

----------- 2016-10-19 18:51:27
第四次 按照 b c两个条件来分组
select count(a),b,c from test group by b,c 

----------- 2016-10-19 14:57:46
http://blog.csdn.net/k8080880/article/details/8482659
1、in 后面是记录集，如
select id, nickname from user where id in (select id from user where id>31);
2、in 后面是字符串
mysql> select id, nickname from user where id in (1, 2, '3');
+----+----------+
| id | nickname |
+----+----------+
|  1 | 张亮     |
|  2 | 张亮     |
|  3 | Justice  |
+----+----------+
3 rows in set (0.00 sec)


-------- 2016-10-08 10:43:38
offset starts from 0:

    SELECT  
        keyword  
    FROM  
        keyword_rank  
    WHERE  
        advertiserid='59'  
    order by  
        keyword  
    LIMIT 2 OFFSET 1;  
比如这个SQL ，limit后面跟的是2条数据，offset后面是从第1条开始读取
Sql代码  收藏代码
    SELECT  
        keyword  
    FROM  
        keyword_rank  
    WHERE  
        advertiserid='59'  
    ORDER BY  
        keyword  
    LIMIT 2 ,1;
而这个SQL，limit后面是从第2条开始读，读取1条信息。

------------ 2016-09-28 21:39:40

mysql backup:
mysqldump -h 10.12.0.61 -u tz8_dev -p --databases tz8_dev > /home/anye/test_back.sql

http://www.cnblogs.com/kissdodog/p/4174421.html

　　2、备份多个数据库
　　语法：
mysqldump -u username -p --databases dbname2 dbname2 > Backup.sql
　　加上了--databases选项，然后后面跟多个数据库
mysqldump -u root -p --databases test mysql > D:\backup.sql
　　3、备份所有数据库
　　mysqldump命令备份所有数据库的语法如下：
mysqldump -u username -p -all-databases > BackupName.sql
　　示例：
mysqldump -u -root -p -all-databases > D:\all.sql

二、数据还原
　　1、还原使用mysqldump命令备份的数据库的语法如下：
　　mysql -u root -p [dbname] < backup.sq
　　示例：
mysql -u root -p < C:\backup.sql
　　2、还原直接复制目录的备份
　　通过这种方式还原时，必须保证两个MySQL数据库的版本号是相同的。MyISAM类型的表有效，对于InnoDB类型的表不可用，InnoDB表的表空间不能直接复制。

e.g., 
mysqldump -h 10.12.0.61 -u tz8_dev -p --databases tz8_dev > /home/kidd/test_back.sql
mysqldump -h 10.168.76.32 -u tz8_dev -p --databases tz8_dev > /home/ahye/online_test_back.sql
  scp ahye@121.43.153.62:/home/ahye/online_test_back.sql ~/tmp/
~/workspace/bc/advanced/MissionImpossible
$ mysql -u root -p < ~/tmp/online_test_back.sql
Enter password:



--------- 2016-09-18 17:21:14
set names gbk;

Query OK, 0 rows affected (0.00 sec)
它相当于下面的三句指令：
SET character_set_client = gbk;
SET character_set_results = gbk;
SET character_set_connection = gbk;
因此，这个方法也可以解决所有字符编码设置为gbk，而控制台显示中文乱码的问题。

⑤当然你也可以试试SET character_set_client = gbk;  即set这种命令来修改各个变量，但当时我不知道这个，也没试过。如果你上面的方法不行可以试试这个。

with and without
  # [mysql]
  # default-character-set = utf8mb4

mysql> show variables like "%character%";
+--------------------------+----------------------------+
| Variable_name            | Value                      |
+--------------------------+----------------------------+
| character_set_client     | utf8mb4                    |
| character_set_connection | utf8mb4                    |
| character_set_database   | utf8mb4                    |
| character_set_filesystem | binary                     |
| character_set_results    | utf8mb4                    |
| character_set_server     | latin1                     |
| character_set_system     | utf8                       |
| character_sets_dir       | /usr/share/mysql/charsets/ |
+--------------------------+----------------------------+

mysql> show variables like "%character%";
+--------------------------+----------------------------+
| Variable_name            | Value                      |
+--------------------------+----------------------------+
| character_set_client     | utf8                       |
| character_set_connection | utf8                       |
| character_set_database   | utf8mb4                    |
| character_set_filesystem | binary                     |
| character_set_results    | utf8                       |
| character_set_server     | latin1                     |
| character_set_system     | utf8                       |
| character_sets_dir       | /usr/share/mysql/charsets/ |
+--------------------------+----------------------------+
8 rows in set (0.01 sec)

mysql> show create database yii2basic;
+-----------+--------------------------------------------------------------------------------------------------+
| Database  | Create Database                                                                                  |
+-----------+--------------------------------------------------------------------------------------------------+
| yii2basic | CREATE DATABASE `yii2basic` /*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci */ |
+-----------+--------------------------------------------------------------------------------------------------+


--------- 2016-09-18 10:46:02

mysql增加列，修改列名、列属性，删除列
MySQL 
mysql修改表名，列名，列类型，添加表列，删除表列
alter table test rename test1; --修改表名
alter table test add  column name varchar(10); --添加表列
alter table test drop  column name; --删除表列
alter table test modify address char(10) --修改表列类型
||alter table test change address address  char(40)
alter table test change  column address address1 varchar(30)--修改表列名 

修改mysql 表的字符编码
mysql> alter table country convert to character set utf8mb4;
Query OK, 13 rows affected (0.07 sec)
Records: 13  Duplicates: 0  Warnings: 0
当然还可以设置mysql的客户端和服务器的默认编码
vi /etc/mysql/my.conf
在[mysql] 下面 添加  default-character-set=utf8
在[mysqld] 下面添加 
character-set-server=utf8
collaction-server = utf8-greneral-cli
修改完后重启mysql server

mysql> show create table country;
+---------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Table   | Create Table                                                                                                                                                                                       |
+---------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| country | CREATE TABLE `country` (
  `code` char(2) NOT NULL,
  `name` varchar(50) DEFAULT NULL,
  `population` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`code`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 |



--------- 2016-09-14 18:50:53
http://blog.csdn.net/mr_linjw/article/details/49849691
1. MySQL 为日期增加一个时间间隔：date_add()
[html] view plain copy
    set @dt = now();  
    select date_add(@dt, interval 1 day);   - 加1天  
    select date_add(@dt, interval 1 hour);   -加1小时  
    select date_add(@dt, interval 1 minute);    - 加1分钟  
    select date_add(@dt, interval 1 second); -加1秒  
    select date_add(@dt, interval 1 microsecond);-加1毫秒  
    select date_add(@dt, interval 1 week);-加1周  
    select date_add(@dt, interval 1 month);-加1月  
    select date_add(@dt, interval 1 quarter);-加1季  
    select date_add(@dt, interval 1 year);-加1年  
例：更新某个时间，每个时间加上一个星期
[html] view plain copy
    UPDATE comment c set c.time = DATE_ADD(c.time, INTERVAL 7 DAY) ;  
2. MySQL 为日期减去一个时间间隔：date_sub()，格式同date_add（）类似
例子：更新某个时间，使每个时间减少一个月
[html] view plain copy
    UPDATE comment c set c.time = DATE_SUB(c.time, INTERVAL 1 MONTH)

---------- 2016-09-14 17:50:39
mysql> select checkin.id, day(checkin_time) from checkin, challenge where checkin.challenge_id=challenge.id and challenge.mission_id=128;
+-----+-------------------+
| id  | day(checkin_time) |
+-----+-------------------+
| 379 |                13 |
| 380 |                13 |
| 381 |                13 |
| 382 |                13 |
| 383 |                12 |
| 385 |                12 |
| 386 |                12 |
| 387 |                11 |
| 388 |                11 |
| 389 |                10 |
| 390 |                10 |
| 391 |                10 |
| 392 |                14 |
+-----+-------------------+
13 rows in set (0.00 sec)

mysql> update period_mission set start_time="2016-09-10 16:45:00" where id=128;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> select checkin.id, checkin_time from checkin, challenge where checkin.challenge_id=challenge.id and challenge.mission_id=128;
+-----+---------------------+
| id  | checkin_time        |
+-----+---------------------+
| 379 | 2016-09-13 16:45:00 |
| 380 | 2016-09-13 16:45:00 |
| 381 | 2016-09-13 16:45:00 |
| 382 | 2016-09-13 16:45:00 |
| 383 | 2016-09-12 16:45:00 |
| 385 | 2016-09-12 16:45:00 |
| 386 | 2016-09-12 16:45:00 |
| 387 | 2016-09-11 16:45:00 |
| 388 | 2016-09-11 16:45:00 |
| 389 | 2016-09-14 17:45:09 |
| 390 | 2016-09-14 17:45:09 |
| 391 | 2016-09-14 17:46:09 |
+-----+---------------------+
12 rows in set (0.00 sec)

mysql> update checkin set checkin_time="2016-09-10 16:45:00" where id=389;Query OK, 1 row affected (0.01 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> update checkin set checkin_time="2016-09-10 16:45:00" where id=390;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> update checkin set checkin_time="2016-09-10 16:45:00" where id=391;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> update test set name="一\U+1F604二一\U+1F604二" where id=1;
Query OK, 1 row affected (0.01 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> select * from test;
+----+----------------------+------------+
| id | name                 | population |
+----+----------------------+------------+
|  1 | 一😄二一😄二             |          1 |
|  2 | 😄                     |          1 |
|  3 | 一😄二                 |         12 |
|  4 | 一😄二一😄二             |         11 |
+----+----------------------+------------+
4 rows in set (0.00 sec)

---------- 2016-09-09 11:14:29
period mission reminder test:

delete from mission_notify where id=1152;
insert into checkin set challenge_id=11898, checkin_time="2016-09-03 10:00:00";
update period_mission set start_time="2016-09-03 00:00:00" where id=1996;

----------- 2016-09-08 15:10:01

insert into `challenge` set mission_id=1917, user_id=4, mission_type=1;
update period_mission set joined_count=2 where id=1917;

------------ 2016-09-06 15:43:52


    private function check() {
        try {
            $now = date('Y-m-d H:i:s');
            $one_hour_in_the_future = date('Y-m-d H:i:s', time()+3600);
            $missions = Mission::find()->where("unix_timestamp(stop_time) > unix_timestamp(\"$now\")")
                ->andWhere("unix_timestamp(stop_time) < unix_timestamp(\"$one_hour_in_the_future\")")
                ->andWhere("unix_timestamp(start_time) < unix_timestamp(\"$now\")")
                ->all();

            foreach ($missions as $mission) {
                if(is_null($mission)) continue;
                $remaining = strtotime($mission->stop_time) - strtotime($now);
                $lifetime = strtotime($mission->stop_time) - strtotime($mission->start_time);

without \"$one_hour_in_the_future\", there might be below error message: 

Next yii\db\Exception: SQLSTATE[42000]: Syntax error or access violation: 1064 You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '15:28:53)) AND (unix_timestamp(stop_time) < unix_timestamp(2016-09-06 16:28:53))' at line 1
The SQL being executed was: SELECT * FROM `mission` WHERE (unix_timestamp(stop_time) > unix_timestamp(2016-09-06 15:28:53)) AND (unix_timestamp(stop_time) < unix_timestamp(2016-09-06 16:28:53)) in /home/kidd/workspace/bc/advanced/MissionImpossible/vendor/yiisoft/yii2/db/Schema.php:633
Stack trace:
#0 /home/kidd/workspace/bc/advanced/MissionImpossible/vendor/yiisoft/yii2/db/Command.php(915): yii\db\Schema->convertException(Object(PDOException), 'SELECT * FROM `...')
#1 /home/kidd/workspace/bc/advanced/MissionImpossible/vendor/yiisoft/yii2/db/Command.php(362): yii\db\Command->queryInternal('fetchAll', NULL)
#2 /home/kidd/workspace/bc/advanced/MissionImpossible/vendor/yiisoft/yii2/db/Query.php(210): yii\db\Command->queryAll()
#3 /home/kidd/workspace/bc/advanced/MissionImpossible/vendor/yiisoft/yii2/db/ActiveQuery.php(133): yii\db\Query->all(NULL)
#4 /home/kidd/workspace/bc/advanced/MissionImpossible/console/tasks/MissionReminderTask.php(37): yii\db\ActiveQuery->all()


---------- 2016-09-06 11:32:31
http://bbs.csdn.net/topics/310121656

在insert into ... 和 select ... where..的时候 如果字段为数字类型，添加或者查询数据时，给数字添加引号是不是多余的？
insert into table (atype) values ('1')
insert into table (atype) values (1)
atype是数字字段，这两种方法都行啊，因为mysql手册上面的东西实在是太乱，根本找不到相关的信息。 

不多余，不加引号总让人对sql注入感到担心，所以只要mysql的sql_mode不严格设置(一般很少设置严格),都要加引号。
特别是查询语句，如果你select ...where后面的条件和用户输入相关，不加引号加大了受攻击的危险系数。

$user_id = $_GET['user_id'];//假如用户在url里构造参数使得$_GET['user_id']为 1 or 1=1
$sql = "select * from `user` where user_id={$user_id}";//下面这句sql不就变成了select * from `user` where user_id=1 or 1=1，所有user数据?

insert into table (atype) values (select something from sometable limit 1) ，括号里是可以构造sql语句的，指不定就给人利用去攻击了，所以还是加引号保险点。

delete,update等也要注意此类问题。 

---------- 2016-09-06 11:24:34

http://stackoverflow.com/questions/17541312/alter-table-add-multiple-columns-after-column1
If you want to add single column after specific field, then the mysql query is:
ALTER TABLE users
    ADD COLUMN count SMALLINT(6) NOT NULL
    AFTER lastname
If you want to add multiple columns, then you need to use 'ADD' command each time for a column. The mysql query as follows as:
ALTER TABLE users
    ADD COLUMN count SMALLINT(6) NOT NULL,
    ADD COLUMN log VARCHAR(12) NOT NULL,
    ADD COLUMN status INT(10) UNSIGNED NOT NULL
    AFTER lastname

---------- 2016-08-26 14:54:47

$ mysql -h 10.12.0.1 -u root -p
Enter password: 
ERROR 2003 (HY000): Can't connect to MySQL server on '10.12.0.1' (111)

but localhost works. 
similar issue occurs while using PDO.
  PHP PDO SQLSTATE[HY000] [2002] Connection refused

http://blog.csdn.net/colourless/article/details/43273719
  grant all privileges on *.* to 'root'@'%' identified by 'root';
  flush privileges; // 听说实际实现方式是将user和privilige表里的东西扔进内存。

sudo /etc/init.d/mysql restart

use mysql;
select Host, User, Password from user;
update user set host='localhost' where Host = '%';

/etc/mysql/my.cnf [commenting below line works, meanwhile, the % record should be there for some user and corresponding pwd, the pwd does not have to be the same as system user]
# bind-address  = 127.0.0.1

---------- 2016-08-25 19:14:51
http://www.cnblogs.com/zcw-ios/articles/3319480.html
mysqldump -h 10.12.0.61 -u tz8_dev tz8_dev qrcode_general > qrcode_general.sql -p
mysqldump -h 10.168.76.32 -u tz8 tz8 qrcode_general > qrcode_general.sql -p

----------- 2016-08-19 11:06:03
mysql> SELECT COUNT(*) FROM `checkin` WHERE checkin.challenge_id = 8620 and TO_DAYS(checkin_time) = TO_DAYS(NOW());



----------- 2016-08-18 17:23:47
//    public function isUserCheckedToday($uid)
//    {
//        $challenge = Challenge::findOne([
//            'mission_id' => $this->id,
//            'mission_type' => MissionType::PERIOD,
//            'user_id' => $uid,
//        ]);
//
//        $today = date('Y-m-d');
//        $checked = Checkin::find(['challenge_id'=>$challenge->id])
//            ->where("unix_timestamp(checkin_time) > unix_timestamp($today)")
//            ->one();
//
//        if ($checked != null) {
//            return true;
//        }
//
//        $pending_count = PendingCheckin::find()->where(['user_id' => $uid])
//            ->andWhere(['challenge_id' => $challenge->id])
//            ->where("unix_timestamp(create_time) > unix_timestamp($today)")
//            ->andWhere('status >= 1')
//            ->andWhere('status <= 2')
//            ->count();
//
//        return $pending_count > 0 ? true : false;
//    }

  /**
     * 当前单位时间打卡
     *
     * @return boolean
     * */
    public function getCheckinCountInUnit()
    {
        // 单次打卡任务
        if ($this->challenge->mission_type == MissionType::SINGLE){
            return ($this->checkinCount);
        } elseif ( $this->challenge->mission_type == MissionType::PERIOD ) {
        // 周期打卡任务
            if ($this->mission->min_unit == CheckinUnit::HOUR) {
                return  (new \yii\db\Query())
                    ->from('checkin')
                    ->where("checkin.challenge_id = {$this->id} and TO_DAYS(checkin_time) == TO_DAYS(NOW()) and HOUR(checkin_time) ==  HOUR(NOW())")
                    ->count();
            } elseif ($this->mission->min_unit == CheckinUnit::DAY) {
                return  (new \yii\db\Query())
                    ->from('checkin')
                    ->where("checkin.challenge_id = {$this->id} and TO_DAYS(checkin_time) == TO_DAYS(NOW())")
                    ->count();
            } elseif ($this->mission->min_unit == CheckinUnit::WEEK) {
                return  (new \yii\db\Query())
                    ->from('checkin')
                    ->where("checkin.challenge_id = {$this->id} and WEEKOFYEAR(checkin_time) == WEEKOFYEAR(NOW())")
                    ->count();
            }
        }

        return 0;
    }

    /**
     * 是否可打卡
     *
     * @return boolean
     * */
    public function canCheckin()
    {
        //任务已经开始 且 单位时间内 未打卡
        if ( $this->mission->isStarted() and  ($this->checkinCountInUnit == 0) ) {
            return true;
        }

        return false;
    }


------- 2016-08-18 14:15:05
datetime:

return date('Y-m-d H:i:s', strtotime($this->stop_time) + 60*10);

select * from checkin where unix_timestamp(checkin_time) > unix_timestamp('2016-08-14 17:39:05');


---------- 2016-08-17 18:16:35
mysql> select id, repeat, period from period_mission;
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ' period from period_mission' at line 1

mysql> select id, `repeat`, period from period_mission;

---------- 2016-08-17 15:36:45
datetime modification:
http://www.php100.com/html/webkaifa/database/Mysql/2009/0111/1160.html

mysql> update mission set start_time=NOW() where id=286;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> select * from mission where id=286;

-------------- 2016-08-16 20:11:37

MySQL重置 Auto_increment字段起始值
有2种方法：
1.alter table tbname auto_increment = x  ; // if x < the current largest id, the auto id will grow on.
设置表tbname的唯一auto_increment字段起始值从x开始，如果此表数据量很多的话，这样执行起来会很慢。

2.truncate tbname ;
直接清空所有数据，下次插入数据时auto_increment字段会自动从0开始。 和delete from tbname不同的是delete只删除数据而不重置auto_incremnet.


---------- 2016-08-05 18:33:24
alter table `test_test` add column subscribed int(11) not null default 1 COMMENT '0: false, 1: true';

-------- 2016-08-05 17:22:06
num字段上创建索引 最普通的情况，是为出现在where子句的字段建一个索引。
ALTER TABLE `test_test` ADD INDEX `num_index` (`num`) ;

http://blog.sina.com.cn/s/blog_52d20fbf0100ofd5.html
存储过程是数据库存储的一个重要的功能，但是MySQL在5.0以前并不支持存储过程，这使得MySQL在应用上大打折扣。好在MySQL 5.0终于开始已经支持存储过程，这样即可以大大提高数据库的处理速度，同时也可以提高数据库编程的灵活性。

CREATE TABLE `test_test` (
  `id` int(11) NOT NULL auto_increment,
  `num` int(11) NOT NULL default '0',
  PRIMARY KEY  (`id`)
 ) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;

DELIMITER //
create procedure p_test_02(pa int(11)) 
begin
  declare max_num int(11) default 1000000;
  declare i int default 0;
  declare rand_num int;
   
  select count(id) into max_num from test_test; 
   
  while i < pa do 
    if max_num < 1000000 then 
      select cast(rand()*100 as unsigned) into rand_num; 
      insert into test_test(num) values(rand_num); 
    end if; 
    set i = i +1; 
  end while; 
end
//
DELIMITER ;

call p_test(1000000);

select distinct num from test_test;
select num from test_test group by num;

mysql> show profiles;
+----------+------------+----------------------------------------+
| Query_ID | Duration   | Query                                  |
+----------+------------+----------------------------------------+
|        1 | 0.02175600 | select distinct(num) from test_test    |
|        2 | 0.02197225 | select num from test_test group by num |
+----------+------------+----------------------------------------+
2 rows in set, 1 warning (0.00 sec)

mysql> explain select num from test_test group by num;
+----+-------------+-----------+------+---------------+------+---------+------+---------+---------------------------------+
| id | select_type | table     | type | possible_keys | key  | key_len | ref  | rows    | Extra                           |
+----+-------------+-----------+------+---------------+------+---------+------+---------+---------------------------------+
|  1 | SIMPLE      | test_test | ALL  | NULL          | NULL | NULL    | NULL | 1100000 | Using temporary; Using filesort |

http://www.cnblogs.com/cy163/archive/2008/10/27/1320798.html
after creating an index, the speed grows a lot faster:
|  2000014 | 0.23482675 | select distinct num from test_test                |
|  2000015 | 0.24779200 | select num from test_test group by num            |
|  2000016 | 0.00190925 | explain select num from test_test group by num    |
|  2000017 | 1.62457875 | create index test_test_num on test_test(num)      |
|  2000018 | 0.00492250 | select num from test_test group by num 

+----+-------------+-----------+------+---------------+------+---------+------+---------+---------------------------------+
mysql> explain select num from test_test group by num;
+----+-------------+-----------+-------+---------------+---------------+---------+------+------+--------------------------+
| id | select_type | table     | type  | possible_keys | key           | key_len | ref  | rows | Extra                    |
+----+-------------+-----------+-------+---------------+---------------+---------+------+------+--------------------------+
|  1 | SIMPLE      | test_test | range | test_test_num | test_test_num | 4       | NULL |  102 | Using index for group-by |
+----+-------------+-----------+-------+---------------+---------------+---------+------+------+--------------------------+

如果你的数据库非常巨大，并且每日的页面请求达上百万算，我想你会获益良多的。不过，如果你要做更为复杂的查询呢，例如将多张表结合起来查询，特别是where限制字句中的字段是来自不止一个表格时，应该怎样处理呢？我通常都尽量避免这种做法，因为这样数据库要将各个表中的东西都结合起来，然后再排除那些不合适的行，搞不好开销会很大。

  如果不能避免，你应该查看每张要结合起来的表，并且使用以上的策略来建立索引，然后再用EXPLAIN命令验证一下是否使用了你料想中的索引。如果是的话，就OK。不是的话，你可能要建立临时的表来将他们结合在一起，并且使用适当的索引。

  要注意的是，建立太多的索引将会影响更新和插入的速度，因为它需要同样更新每个索引文件。对于一个经常需要更新和插入的表格，就没有必要为一个很少使用的where字句单独建立索引了，对于比较小的表，排序的开销不会很大，也没有必要建立另外的索引。

----------- 2016-08-05 15:29:48
mysql更改表结构：添加、删除、修改字段、调整字段顺序 
  alter table `user_movement_log` Add column GatewayId int not null default 0 AFTER `Regionid`

------------- 2016-08-05 12:18:51
yii pdo with mysql

    public function actionStats()
    {
        $scenes = QrMessage::findBySql('select event_key, sum(count) as scan_count, count(event_key) as user_count from qrcode_general group by event_key')->all();
        return $this->render('stats', ['scenes' => $scenes]);
    }

class QrMessage extends \yii\db\ActiveRecord
{
    public $user_count;
    public $scan_count;
    public static function tableName()
    {
        return 'qrcode_general';
    }

    public function rules()
    {
        return [];
    }
}

http://www.yiichina.com/doc/guide/2.0/start-databases
public function actionIndex()
    {
        $query = Country::find();

        $pagination = new Pagination([
            'defaultPageSize' => 5,
            'totalCount' => $query->count(),
        ]);

        $countries = $query->orderBy('name')
            ->offset($pagination->offset)
            ->limit($pagination->limit)
            ->all();

        return $this->render('index', [
            'countries' => $countries,
            'pagination' => $pagination,
        ]);
    }
------------- 2016-08-04 15:37:36

select max(id) from t5;
mysql> select * from qrcode_general where scene_id like '%1111';
  OR可以和AND一起使用。当两者一起使用时，AND要比OR先运算。
SELECT * FROM employee WHERE num IN(1,3,4) AND age=25 OR sex='女';
  AND和OR关键字可以连接条件表达式。这些条件表达式中可以使用“=”、“>”等操作符，也可以使用IN、BETWEEN AND和LIKE等关键字，而且，LIKE关键字匹配字符串时可以使用“%”和“_”等通配符。

mysql> select * from states order by population limit 4 offset 1;
select name,sum(score) ,avg(score) from result group by name;
1. select scene_id, sum(count) from qrcode_general group by scene_id;
2. duplicated subscription

select count(distinct name) from result; 
  get the number of different names in the table.
select distinct name from result;
  return all different name, no duplication.
select name, score from result group by name;
  return no duplicated name with one of his/her scores.

http://www.cnblogs.com/zox2011/archive/2012/09/12/2681797.html
用distinct的时候，如果它有索引，mysql会把它转成group by的方式执行。
加了索引之后 distinct 比没加索引的 distinct 快了 107倍。
加了索引之后 group by 比没加索引的 group by 快了 43倍。
再来对比 ：distinct  和 group by
不管是加不加索引 group by 都比 distinct 快。因此使用的时候建议选 group by 

SELECT INTO FROM语句
语句形式为：SELECT vale1, value2 into Table2 from Table1
要求目标表Table2不存在，因为在插入时会自动创建表Table2，并将Table1中指定字段数据复制到Table2中 。

------------- 2016-08-04 17:17:46
数据库中的数据都是存储在表中的，而视图只是一个或多个表依照某个条件组合而成的结果集，一般来说你可以用update，insert，delete等sql语句修改表中的数据，而对视图只能进行select操作。但是也存在可更新的视图，对于这类视图的update，insert和delete等操作最终会作用于与其相关的表中数据。因此，表是数据库中数据存储的基础，而视图只是为了满足某种查询要求而建立的一个对象。

------------- 2016-08-04 17:04:39
http://www.blogjava.net/Johnny-Ajun/archive/2011/08/28/357445.html
having字句可以让我们筛选成组后的各种数据，where字句在聚合前先筛选记录，也就是说作用在group by和having字句前。而 having子句在聚合后对组记录进行筛选。
where和having子句都可以实现过滤记录的功能,但他们的用法还是有一些区别的,看一例子:
用group by和having子句联合来查出不重复的记录,sql如下:
select uid,email,count(*) as ct from `edm_user081217` GROUP BY email
然后看这个，就容易理解了
select uid,email,count(*) as ct from `edm_user081217` GROUP BY email HAVING ct > 1
先用group by 对email进行分组,在用having来过滤大于1的,这样查找出来的就是重复的记录了.
WHERE 子句作用于表和视图，HAVING 子句作用于组。
WHERE 在分组和聚集计算之前选取输入行（因此，它控制哪些行进入聚集计算）， 而 HAVING 在分组和聚集之后选取分组的行。因此，WHERE 子句不能包含聚集函数； 因为试图用聚集函数判断那些行输入给聚集运算是没有意义的。 相反，HAVING 子句总是包含聚集函数。（严格说来，你可以写不使用聚集的 HAVING 子句， 但这样做只是白费劲。同样的条件可以更有效地用于 WHERE 阶段。）
在前面的例子里，我们可以在 WHERE 里应用城市名称限制，因为它不需要聚集。 这样比在 HAVING 里增加限制更加高效，因为我们避免了为那些未通过 WHERE 检查的行进行分组和聚集计算
综上所述：
having一般跟在group by之后，执行记录组选择的一部分来工作的。
where则是执行所有数据来工作的。
再者having可以用聚合函数，如having sum(qty)>1000
原链接：http://hi.baidu.com/ww999/blog/item/f330c8d3073107d0a8ec9a72.html

------------- 2016-08-04 17:02:35

DROP TABLE IF EXISTS `result`;
CREATE TABLE `result` (
`name` varchar(20) default NULL,
`subject` varchar(20) default NULL,
`score` tinyint(4) default NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

insert into result values
  ('张三','数学',90),
  ('张三','语文',50),
  ('张三','地理',40),
  ('李四','语文',55),
  ('李四','政治',45),
  ('王五','政治',30),
  ('赵六','语文',100),
  ('赵六','数学',99),
  ('赵六','品德',98);

mysql> select name,sum(score < 60) ,avg(score) from result group by name having sum(score<60) >=2; 
+--------+-----------------+------------+
| name   | sum(score < 60) | avg(score) |
+--------+-----------------+------------+
| 张三   |               2 |    60.0000 |
| 李四   |               2 |    50.0000 |
+--------+-----------------+------------+
2 rows in set (0.01 sec)

mysql> select name,sum(score) ,avg(score) from result group by name having sum(score<60) >=2;
+--------+------------+------------+
| name   | sum(score) | avg(score) |
+--------+------------+------------+
| 张三   |        180 |    60.0000 |
| 李四   |        100 |    50.0000 |
+--------+------------+------------+
2 rows in set (0.00 sec)




---------- 2016-08-04 14:19:09
sample .sql


DROP TABLE IF EXISTS `account`;
CREATE TABLE `account` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `open_id` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL,
  `union_id` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL,
  `avatar` varchar(1024) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `nickname` varchar(200) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `username` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL,
  `gender` int(11) DEFAULT '0' COMMENT '1: 男, 2: 女',
  `province` varchar(50) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `city` varchar(50) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `country` varchar(50) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `birthday` varchar(10) COLLATE utf8mb4_unicode_ci DEFAULT '',
  `privilege` varchar(10) COLLATE utf8mb4_unicode_ci DEFAULT '',
  `interest` varchar(10) COLLATE utf8mb4_unicode_ci DEFAULT '',
  `phone` varchar(10) COLLATE utf8mb4_unicode_ci DEFAULT '',
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (`id`),
  UNIQUE KEY `phone_index` (`phone`)
) ENGINE=InnoDB AUTO_INCREMENT=0 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

datetime:
INSERT INTO `qrcode_general` VALUES (1, 'okpkfv0u2gC1rJauNZ_Qm6lJ8Aew','gh_d790e147d0b7',1,'qrscene_1111','2009-9-9 23:22:11',1);

想insert一条数据，如何使用这个id字段让它自动增加呢: null
INSERT INTO `qrcode_general` VALUES (null, 'okpkfv0u2gC1rJauNZ_Qm6lJ8Aew','gh_d790e147d0b7',1,'qrscene_1111','2009-9-9 23:22:11',1);

AUTO_INCREMENT seems to be actually start from at least 1 instead of 0: 没有最大值上限?
tryingn to "insert into t5 values(0);", but the new item was with an incrementing id instead of 0.
$ mysql -V
mysql  Ver 14.14 Distrib 5.6.31, for Linux (x86_64) using  EditLine wrapper

http://blog.csdn.net/HW_LiBo/article/details/40097125 对于innodb表，update auto_increment字段，如果列值与已有的值重复，则会出错；如果大于已有的最大值，可能会引入一个坑，会造成编号重复错误，插入数据失败的情况，可见在update自增列值是要注意。
  InnoDB表update自增列时，由大值改为小值，除了可能会出现重复数据修改失败外，没有其他风险。
  InnoDB表update自增列，由小改大 
  MyISAM表的update自增列不会存在风险。

some workaround: alter table t5 AUTO_INCREMENT=20;

test.sql
  CREATE TABLE `t5` (  
    `id` int(10) unsigned NOT NULL AUTO_INCREMENT,  
    PRIMARY KEY (`id`)  
  ) ENGINE=InnoDB;

  insert into t5 values(null);
  insert into t5 values(5),(9);
  insert into t5 values(null);

mysql> select * from t5;
+----+
| id |
+----+
|  1 |
|  5 |
|  9 |
| 10 |
+----+
4 rows in set (0.00 sec)

mysql> update t5 set id=12 where id=5;
Query OK, 1 row affected (0.01 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> select * from t5;
+----+
| id |
+----+
|  1 |
|  9 |
| 10 |
| 12 |
+----+
4 rows in set (0.00 sec)

mysql> insert into t5 values(null);
Query OK, 1 row affected (0.02 sec)

mysql> select * from t5;
+----+
| id |
+----+
|  1 |
|  9 |
| 10 |
| 11 |
| 12 |
+----+
5 rows in set (0.01 sec)


------------- 2016-08-04 15:27:26
mysql> show create table qrcode_general;

| Table          | Create Table                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |

| qrcode_general | CREATE TABLE `qrcode_general` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `open_id` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL,
  `to_id` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL,
  `event` int(11) NOT NULL COMMENT '0: scan, 1: subscribe',
  `scene_id` varchar(72) COLLATE utf8mb4_unicode_ci NOT NULL,
  `create_time` datetime NOT NULL,
  `count` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci |

1 row in set (0.00 sec)

mysql> desc qrcode_general;
+-------------+---------------------+------+-----+---------+----------------+
| Field       | Type                | Null | Key | Default | Extra          |
+-------------+---------------------+------+-----+---------+----------------+
| id          | bigint(20) unsigned | NO   | PRI | NULL    | auto_increment |
| open_id     | varchar(50)         | NO   |     | NULL    |                |
| to_id       | varchar(50)         | NO   |     | NULL    |                |
| event       | int(11)             | NO   |     | NULL    |                |
| scene_id    | varchar(72)         | NO   |     | NULL    |                |
| create_time | datetime            | NO   |     | NULL    |                |
| count       | int(11)             | NO   |     | NULL    |                |
+-------------+---------------------+------+-----+---------+----------------+
7 rows in set (0.00 sec)

mysql> show full columns from qrcode_general;
+-------------+---------------------+--------------------+------+-----+---------+----------------+---------------------------------+-----------------------+
| Field       | Type                | Collation          | Null | Key | Default | Extra          | Privileges                      | Comment               |
+-------------+---------------------+--------------------+------+-----+---------+----------------+---------------------------------+-----------------------+
| id          | bigint(20) unsigned | NULL               | NO   | PRI | NULL    | auto_increment | select,insert,update,references |                       |
| open_id     | varchar(50)         | utf8mb4_unicode_ci | NO   |     | NULL    |                | select,insert,update,references |                       |
| to_id       | varchar(50)         | utf8mb4_unicode_ci | NO   |     | NULL    |                | select,insert,update,references |                       |
| event       | int(11)             | NULL               | NO   |     | NULL    |                | select,insert,update,references | 0: scan, 1: subscribe |
| scene_id    | varchar(72)         | utf8mb4_unicode_ci | NO   |     | NULL    |                | select,insert,update,references |                       |
| create_time | datetime            | NULL               | NO   |     | NULL    |                | select,insert,update,references |                       |
| count       | int(11)             | NULL               | NO   |     | NULL    |                | select,insert,update,references |                       |
+-------------+---------------------+--------------------+------+-----+---------+----------------+---------------------------------+-----------------------+
7 rows in set (0.01 sec)


------------ 2016-08-04 10:32:29
mysql export

below 2 cmds generate the same output 仅仅导出数据库的结构
$ mysqldump -h localhost -u root -p -d --add-drop-table yii2basic > yii2basic_drop_table.sql
$ mysqldump -h localhost -u root -p -d yii2basic > yii2basic_drop_table.sql

below cmd will also insert data for tables: [in an over-writing manner]
$ mysqldump -h localhost -u root -p yii2basic > yii2basic.sql

仅仅导出表的结构
mysqldump -h127.0.0.1 -uroot -p -d --add-drop-table emlog emlog_blog > emlog_blog_structure.sql

导入的话,有很多种方法,最单的就是source命令,先用mysql命令连接上数据库.然后用source导入指定路径的文件就可以了.
mysql> source /home/kidd/tmp/yii2basic_drop_table.sql
Query OK, 0 rows affected (0.00 sec)
..............
mysql> show tables;
+---------------------+
| Tables_in_yii2basic |
+---------------------+
| country             |
| states              |
+---------------------+
2 rows in set (0.00 sec)
mysql> select * from country;
Empty set (0.00 sec)
mysql> select  * from states;
Empty set (0.00 sec)

notice that the original data is all cleared.

to import the backup data: source /home/kidd/tmp/yii2basic.sql

------------ 2016-08-04 10:24:52

$ mysqldump -h localhost -u root -p yii2basic states > states.sql
Enter password: 
$ ls
states.sql

mysqldump -h localhost -u root -p yii2basic > yii2basic.sql

几个比较常用的参数有 -P或--port 要连接的服务器端口,如果MySQL的端口不是3306,就要用到这个参数 -d或--no-data 没有详细数据,仅仅导出数据的结构

-P或--port          要连接的服务器端口,如果MySQL的端口不是3306,就要用到这个参数
-d或--no-data       没有详细数据,仅仅导出数据的结构
--add-drop-database 在创建数据库时,先drop掉已经存在的同名数据库[一般跟在-d参数后]
--add-drop-table    在创建表时,先drop掉已经存在的同名表[一般跟在-d参数后]


----------- 2016-08-03 21:13:04

SQL limit offset
经常用到在数据库中查询中间几条数据的需求
比如下面的sql语句：
① select * from testtable limit 2,1;
② select * from testtable limit 2 offset 1;
这两个都是能完成需要，但是他们之间是有区别的：
①是从数据库中第三条开始查询，取一条数据，即第三条数据
②是从数据库中的第二条数据开始查询两条数据，即第二条和第三条。

mysql> select * from country order by population;
+------+----------------+------------+
| code | name           | population |
+------+----------------+------------+
| KI   | Kidd           |          1 |
| B    | Boy            |          2 |
| JP   | Japan          |    1111111 |
| CA   | Canada         |    1147000 |
| AU   | Australia      |   18886000 |
| FR   | France         |   59225700 |
| GB   | United Kingdom |   59623400 |
| DE   | Germany        |   82164700 |
| RU   | Russia         |  146934000 |
| BR   | Brazil         |  170115000 |
| US   | United States  |  278357000 |
| IN   | India          | 1013662000 |
| CN   | China          | 1277558000 |
+------+----------------+------------+
13 rows in set (0.00 sec)

mysql> select * from country order by population limit 2 offset 3;
+------+-----------+------------+
| code | name      | population |
+------+-----------+------------+
| CA   | Canada    |    1147000 |
| AU   | Australia |   18886000 |
+------+-----------+------------+
2 rows in set (0.00 sec)


-------------- 2016-08-03 20:55:42
yii pdo

http://www.yiichina.com/doc/guide/2.0/start-databases
创建活动记录
创建一个继承自活动记录类的类 Country， 把它放在 models/Country.php 文件，去代表和读取 country 表的数据。
<?php
namespace app\models;
use yii\db\ActiveRecord;
class Country extends ActiveRecord
{
}
这个 Country 类继承自 yii\db\ActiveRecord。你不用在里面写任何代码。 只需要像现在这样，Yii 就能根据类名去猜测对应的数据表名。
    注意：如果类名和数据表名不能直接对应，可以覆写 yii\db\ActiveRecord::tableName() 方法去显式指定相关表名。
使用 Country 类可以很容易地操作 country 表数据，就像这段代码：
use app\models\Country;
// 获取 country 表的所有行并以 name 排序
$countries = Country::find()->orderBy('name')->all();
// 获取主键为 “US” 的行
$country = Country::findOne('US');
// 输出 “United States”
echo $country->name;
// 修改 name 为 “U.S.A.” 并在数据库中保存更改
$country->name = 'U.S.A.';
$country->save();
    补充：活动记录是面向对象、功能强大的访问和操作数据库数据的方式。你可以在活动记录章节了解更多信息。 除此之外你还可以使用另一种更原生的被称做数据访问对象的方法操作数据库数据。
创建操作
为了向最终用户显示国家数据，你需要创建一个操作。 相比之前小节掌握的在 site 控制器中创建操作， 在这里为所有和国家有关的数据新建一个控制器更加合理。 新控制器名为 CountryController，并在其中创建一个 index 操作，如下：
<?php
namespace app\controllers;
use yii\web\Controller;
use yii\data\Pagination;
use app\models\Country;
class CountryController extends Controller
{
    public function actionIndex()
    {
        $query = Country::find();
        $pagination = new Pagination([
            'defaultPageSize' => 5,
            'totalCount' => $query->count(),
        ]);
        $countries = $query->orderBy('name')
            ->offset($pagination->offset)
            ->limit($pagination->limit)
            ->all();
        return $this->render('index', [
            'countries' => $countries,
            'pagination' => $pagination,
        ]);
    }
}
把上面的代码保存在 controllers/CountryController.php 文件中。
index 操作调用了活动记录 Country::find() 方法，去生成查询语句并从 country 表中取回所有数据。 为了限定每个请求所返回的国家数量，查询在 yii\data\Pagination 对象的帮助下进行分页。 Pagination 对象的使命主要有两点：
    为 SQL 查询语句设置 offset 和 limit 从句， 确保每个请求只需返回一页数据（本例中每页是 5 行）。
    在视图中显示一个由页码列表组成的分页器， 这点将在后面的段落中解释。
在代码末尾，index 操作渲染一个名为 index 的视图， 并传递国家数据和分页信息进去。
创建视图
在 views 目录下先创建一个名为 country 的子目录。这个目录存储所有由 country 控制器渲染的视图。 在 views/country 目录下创建一个名为 index.php 的视图文件， 内容如下：
<?php
use yii\helpers\Html;
use yii\widgets\LinkPager;
?>
<h1>Countries</h1>
<ul>
<?php foreach ($countries as $country): ?>
    <li>
        <?= Html::encode("{$country->name} ({$country->code})") ?>:
        <?= $country->population ?>
    </li>
<?php endforeach; ?>
</ul>
<?= LinkPager::widget(['pagination' => $pagination]) ?>
这个视图包含两部分用以显示国家数据。第一部分遍历国家数据并以无序 HTML 列表渲染出来。 第二部分使用 yii\widgets\LinkPager 去渲染从操作中传来的分页信息。 小部件 LinkPager 显示一个分页按钮的列表。 点击任何一个按钮都会跳转到对应的分页。
试运行
浏览器访问下面的 URL 看看能否工作：
http://localhost/index.php?r=country/index
http://localhost/index.php?r=states/index

below function is triggered on every call to http://localhost/index.php?r=states/index

class StatesController extends Controller
{
    public function actionIndex()


---------- 2016-08-03 20:03:20
yii & mysql
http://www.yiichina.com/doc/guide/2.0/start-databases

.sql
CREATE TABLE `country` (
  `code` CHAR(2) NOT NULL PRIMARY KEY,
  `name` CHAR(52) NOT NULL,
  `population` INT(11) NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

INSERT INTO `country` VALUES ('AU','Australia',18886000);
INSERT INTO `country` VALUES ('BR','Brazil',170115000);
INSERT INTO `country` VALUES ('CA','Canada',1147000);
INSERT INTO `country` VALUES ('CN','China',1277558000);
INSERT INTO `country` VALUES ('DE','Germany',82164700);
INSERT INTO `country` VALUES ('FR','France',59225700);
INSERT INTO `country` VALUES ('GB','United Kingdom',59623400);
INSERT INTO `country` VALUES ('IN','India',1013662000);
INSERT INTO `country` VALUES ('RU','Russia',146934000);
INSERT INTO `country` VALUES ('US','United States',278357000);

配置数据库连接
开始之前，请确保你已经安装了 PHP PDO 扩展和你所使用的数据库的 PDO 驱动（例如 MySQL 的 pdo_mysql）。 对于使用关系型数据库来讲，这是基本要求。

<?php
namespace app\models;
use yii\db\ActiveRecord;
class Country extends ActiveRecord
{
}
这个 Country 类继承自 yii\db\ActiveRecord。你不用在里面写任何代码。 只需要像现在这样，Yii 就能根据类名去猜测对应的数据表名。
    注意：如果类名和数据表名不能直接对应，可以覆写 yii\db\ActiveRecord::tableName() 方法去显式指定相关表名。
使用 Country 类可以很容易地操作 country 表数据，就像这段代码：
use app\models\Country;
// 获取 country 表的所有行并以 name 排序
$countries = Country::find()->orderBy('name')->all();
// 获取主键为 “US” 的行
$country = Country::findOne('US');
// 输出 “United States”
echo $country->name;
// 修改 name 为 “U.S.A.” 并在数据库中保存更改
$country->name = 'U.S.A.';
$country->save();
    补充：活动记录是面向对象、功能强大的访问和操作数据库数据的方式。你可以在活动记录章节了解更多信息。 除此之外你还可以使用另一种更原生的被称做数据访问对象的方法操作数据库数据。[http://www.yiichina.com/doc/guide/2.0/db-dao]


-------------- 2016-08-03 20:03:09
$ mysql -u root -p
mysql> create database yii2basic;
source basic/database/country.sql;
  another way: D:\mysql\bin\mysql –uroot –p123456 -Dtest<d:\test\ss.sql


------------ 2016-08-03 20:35:54
PDO扩展为PHP访问数据库定义了一个轻量级的、一致性的接口，它提供了一个数据访问抽象层，这样，无论使用什么数据库，都可以通过一致的函数执行查询和获取数据。
在一些PHP管理系统需要开启PDO和PDO_MySQL扩展，方法很简单：
1、找到php.ini文件
2、打开后，搜索 extension=php_pdo.dll 和 extension=php_pdo_mysql.dll ，去掉前面“;”的注释。
最终这两行配置内容如下：
extension=php_pdo.dll
extension=php_pdo_mysql.dll
重新启动apache或者iis后，在phpinfo函数中查看，是否开启。 


------------- 2016-08-03 20:45:43
http://www.linuxdiyf.com/linux/15732.html
ubuntu下安装好LAMP后默认情况没有安装mysql_pdo扩展，以下是安装 步聚，在终端输入以下命令：
1、pecl search pdo
2、sudo pecl install pdo
当出现sh: phpize: command  not found这些提示时先运行sudo apt-get install php5-dev
3、sudo pecl install pdo_mysql
当出现configure: error: Cannot find MySQL header files under
ERROR: `/tmp/pear/temp/PDO_MYSQL/configure' failed
提示时先运行
sudo apt-get install libmysqlclient15-dev
4、sudo gedit /etc/php5/apache2/php.ini
5、在最后面加入以下2行
extension = pdo.so
extension = pdo_mysql.so
6、重启APACHE
sudo /etc/init.d/apache2 restart
我做以上操作是因为用zend framework框加时连接数据库出现以下提示
Fatal error: Uncaught exception 'Zend_Db_Adapter_Exception' with message 'The mysql driver is not currently installed' in
Ubuntu下安装PDO：http://www.linuxdiyf.com/linux/15311.html
Ubuntu下的Mysql无法通过PDO连接：http://www.linuxdiyf.com/linux/14337.html

/usr
$ fn pdo.so
./lib/php/20151012/pdo.so

http://www.jb51.net/article/60256.htm
PDO（PHP Data Object）扩展为PHP定义了一个访问数据库的轻量、持久的接口。实现PDO接口的每一种数据库驱动都能以正则扩展的形式把各自的特色表现出来。
主要：PDO扩展只是一个抽象的接口层，利用PDO扩展本身并不能实现任何数据库操作，必须使用一个特定的数据库PDO驱动访问数据库

------------ 2016-08-05 15:47:31
sample .sql

DROP TABLE IF EXISTS `qrcode_general`;
CREATE TABLE `qrcode_general` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `from_id` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL,
  `to_id` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL,
  `event` varchar(11) NOT NULL,
  `event_key` varchar(72) COLLATE utf8mb4_unicode_ci NOT NULL,
  `create_time` datetime NOT NULL,
  `count` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

DROP TABLE IF EXISTS `qrcode_ticket`;
CREATE TABLE `qrcode_ticket` (
  `id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
  `ticket` varchar(128) COLLATE utf8mb4_unicode_ci NOT NULL,
  `client_event_key` varchar(64) COLLATE utf8mb4_unicode_ci NOT NULL,
  `type` int(11) NOT NULL COMMENT '0: string, 1: integer',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

INSERT INTO `qrcode_general` VALUES (null, 'okpkfv0u2gC1rJauNZ_Qm6lJ8Aew','gh_d790e147d0b7',"subscribe",'qrscene_1111','2009-9-9 23:22:11',1);
INSERT INTO `qrcode_general` VALUES (null, 'okpkfv0u2gC1rJauNZ_Qm6lJ8Aew','gh_d790e147d0b7',"SCAN",'1111','2009-9-9 23:22:11',2);
INSERT INTO `qrcode_general` VALUES (null, 'okpkfv0u2gB1rJauNZ_Qm6lJ8Aew','gh_d790e147d0b7',"SCAN",'1111','2009-9-9 23:22:11',3);

INSERT INTO `qrcode_ticket` VALUES (null, 'gQHq8DoAAAAAAAAAASxodHRwOi8vd2VpeGluLnFxLmNvbS9xL2EwUzJvaWZsUDVoRzROR3lCR2hXAAIEa8KhVwMEAAAAAA==', '1111', 1);


---------------- 2016-10-09 01:41:58
http://www.cnblogs.com/zhangronghua/archive/2008/03/12/1102744.html

刚刚开始学习PHP，一切都感觉很新鲜，也有很多不懂的地方，今天就遇到了一个麻烦。在按照php5 MySQL5 apache2 phpmyadmin ZendOptimizer安装与配置[转]一文中指明的过程配置好php环境后，便开始录入＜PHP和MYSQL WEB开发＞中的demo学习，可是在连接mysql时遇到了”class 'mysqli' not found'的错误。第一反应是检查自己的配置，在确认是按照正确上文介绍的方法配置后，还是没有解决问题，只能利用google搜索。最后找到解决方法，原来mysqli是php5新增中的函数库，在上文介绍时，并没有为该函数库做配置，要想在php中使用mysqli函数库，需要将php.ini文件中“;extension=php_mysqli.dll"行的;去掉。这样就能解决这个错误了。
    很简单的一个错误，因为是初学者的原因，费了不少事。:)

http://blog.csdn.net/liehuo123/article/details/20044883
