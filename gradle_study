


------------ 2016-11-17 16:13:59
intellij idea -> java web

file -> new project -> gradle [choose java & web]

  the folder structure with build.gradle and webapp is generated after auto gradle building.
  configure tomcat and run, index.jsp is displayable.
  as mentioned in "http://www.open-open.com/lib/view/1427034613470", 2 build artifacts are added automatically in gradle project. [配置好 tomcat，将gradle生成的artifacts（gradle构建时自动为项目天刚加了2个artifacts，一个是项目的war包，一个是没 打包的exploded，推荐用exploded）添加到tomcat的deployment中。 ]

if there is no WEB-INF/web.xml, create it manually. [add the folder to artifacts if necessary]

~/tmp/gradle_03
$ tree
.
├── build
│   └── tmp
│       └── war
│           └── MANIFEST.MF
├── build.gradle
├── gradle
│   └── wrapper
│       ├── gradle-wrapper.jar
│       └── gradle-wrapper.properties
├── gradlew
├── gradlew.bat
├── out
│   └── artifacts
│       └── gradle_03
│           └── exploded
│               └── gradle_03-1.0-SNAPSHOT.war
│                   ├── index.jsp
│                   └── META-INF
│                       └── MANIFEST.MF
├── settings.gradle
└── src
    ├── main
    │   ├── java
    │   ├── resources
    │   └── webapp
    │       └── index.jsp
    └── test
        ├── java
        └── resources

19 directories, 10 files

-------- 2016-11-17 15:01:05
http://www.admin10000.com/document/6018.html
导入Jar文件
　　这种可能很常见，可以下载到别人搞好的jar包，这样可以直接在自己的主module下创建libs文件夹(我这里这样，只是为了兼容eclipse方式),然后把jar文件放进去,然后在module的build.gradle文件中的dependecies{}添加如下代码：
compile files('libs/name.jar')
　　当libs文件夹下面有多个文件时，可以用一句代码包含这些包:
compile fileTree(dir: 'libs', include: ['*.jar'])
　　当有文件不需要被包含时，可以这样:
compile fileTree(dir: 'libs', exclude: ['android-support*.jar'], include: ['*.jar'])
　　从上面的代码中可以看到我们可以使用通配符, +表示一个字符，*表示０到多个字符。

------- 2016-11-16 16:06:03
java WEB 目录的标准结构  

WEB-ROOT   :   根目录，一般虚拟目录会直接在此目录中设置
  | ---  WEB-INF  整个WEB中最安全的目录，无法直接访问，若访问，需要在web.xml中配置：见图
      |-- classes  保存所有的*.class文件 所有的class都要放在 包中
      |-- lib           存放第三方的jar文件
      |-- web.xml  WEB的部署描述符    
  |---   css     存放所有的*.css文件
  |---   js        存放所有的*.js文件
  |---   jsp      存放所有的jsp文件
  |---   index.htm, index.jsp       欢迎页面

------------ 2016-11-16 15:42:25
java web:
gradle/idea

http://m.blog.csdn.net/article/details?id=51297473

1. 第一步很简单的，file->new->project 
2. 完成第一步后，会弹出这样一个窗体，然后在左边栏目找到gradle，然后在右边勾选java 和web 两个选项，next。
3. 到了输入groupId和acrtifactId窗口了，对于这两个名字的解释，可以看我上一篇 maven 创建java web 项目的第三步有解释，next。 
4. 刚进来默认选择的是Use default gradle wrapper(recommended), 我不选择这个是因为我本地有装gradle，所有不需要是用它默认的，如果选择它，那么创建项目之后，它就会去自动下载gradle，然后配置好，下载过程一般都很慢，至少我在我电脑上很慢。所有我选择的是Use local gradle distribution,。然后上面还有一个勾选，就是自动创建空的根目录文件夹，如果不选择，创建完的项目会没有java文件夹，所以勾选，让它自动创建吧，next。

$ tree
.
├── build.gradle
├── settings.gradle
└── src
    └── main
        └── webapp
            └── index.jsp

3 directories, 3 files
kidd@kidd-OptiPlex-9020:
~/tmp/hello
$ la
build.gradle  .idea  settings.gradle  src

6.创建完成之后，如果你之前没有配置tomcat的话，是没办法运行的，所以也需要配置tomcat，如下图, 左侧是成功创建的项目文件目录，如果之前没有勾选Create directories for empty content roots automatically, 那么就不会生成java 和resource这个两个孔文件夹。这不的重点是点击Edit configuration
7. 弹出配置框，默认是配置server属性，输入这个配置的名字，name，可以取任意的名字，点击configure选择本地tomcat的路径，都配置好了直接点击OK就可以运行了。 
8. 然后选择server 旁边的Deployment， 页面之后，点击加号，在弹出的页面选择名字更长的那个，也就是后面有（exploded）的那条，点击OK。 
9. 在右侧输入Application context的名字，这个对应就是等会儿运行时，默认路径（http://localhost:8080/demo/）中的demo, 所以如果你不配置这项，它的默认路径将会是（http://localhost:8080/）这样的。最后点击apply, 再点击ok. 



----------- 2016-11-04 16:07:01
首先创建一个gradle项目目录，然后在其目录下运行：

gradle tasks
  a .gradle folder is generated

建立一个build.gradle文件，第一行输入：

apply plugin: 'java'

这简单一行带来很大变化，再次运行gradle tasks，你就会看到很多任务，包括构建项目，创建JavaDOC和运行测试。 


到目前为止，我们的gradle目录下还没有Java源码，可以使用Eclipse创建一个Java项目，也可以手工创建一个Java项目，主要是建立一个放置源码的目录：src，然后创建一个src/main/java/hello
  mkdir -p src/main/java/hello

/home/kidd/workspace/java/gradle/src/main/java/hello/HelloWorld.java
  package hello;
  public class HelloWorld {
    public static void main(String[] args) {
      System.out.println("hello");
    }
  }

然后，再回到src上级目录下输入gradle build，这时会发现编译成功信息，与src平行多出build目录，这个目录下有三个目录：
    classes. 项目编译的 .class 文件
    reports.构建的报告 包括测试报告.
    libs. 生成的组装的库包 ( JAR and/or WAR 文件).
我们项目的jar包就在这个libs目录下了

~/workspace/java/gradle
$ gradle build
:compileJava
:processResources UP-TO-DATE
:classes
:jar
:assemble
:compileTestJava UP-TO-DATE
:processTestResources UP-TO-DATE
:testClasses UP-TO-DATE
:test UP-TO-DATE
:check UP-TO-DATE
:build

BUILD SUCCESSFUL

Total time: 2.473 secs

~/workspace/java/hello_gradle
$ tree
.
├── build
│   ├── classes
│   │   └── main
│   │       └── hello
│   │           └── HelloWorld.class
│   ├── dependency-cache
│   ├── libs
│   │   └── hello_gradle.jar
│   └── tmp
│       ├── compileJava
│       └── jar
│           └── MANIFEST.MF
├── build.gradle
└── src
    └── main
        └── java
            └── hello
                └── HelloWorld.java

http://www.cnblogs.com/adolfmc/archive/2012/10/07/2713562.html
大家都知道一个java应用项目可以打包成一个jar，当然你必须指定一个拥有main函数的main class作为你这个jar包的程序入口。
具体的方法是修改jar包内目录META-INF下的MANIFEST.MF文件。

jar 是java的一个压缩文件名 (java archive)，但是格式仍是zip的，所以你可以用winzip等支持zip格式的软件打开，如果你是想自己生成一个jar文件，你可以用 jar工具来做。
$ jar tvf build/libs/hello_gradle.jar 
     0 Fri Nov 04 16:51:06 CST 2016 META-INF/
    25 Fri Nov 04 16:51:06 CST 2016 META-INF/MANIFEST.MF
     0 Fri Nov 04 16:14:16 CST 2016 hello/
   539 Fri Nov 04 16:51:06 CST 2016 hello/HelloWorld.class

Java插件在我们的项目中加入了一个Jar任务，每一个Jar对象都一个manifest属性，这个属性是Manifest的一个实例。
我们可以对生成的Jar文件的主类进行配置，使用Manifest接口的attributes()方法。换句话说，我们可以使用一个包含键值对的map结构指定加入到manifest文件的属性集。
我们能够通过设置Main-Class属性的值，指定我们程序的入口点。

/home/kidd/workspace/java/hello_gradle/build.gradle
apply plugin: 'java'

jar {
    manifest {
        attributes 'Main-Class': 'hello.HelloWorld'
    }
}
我们执行gradle assemble或gradle build命令生成一个新的jar文件

http://www.blogjava.net/huanghuizz/articles/163379.html
把manifest文件插入JAR文件
使用 m 选项，把指定文件名的manifest文件 传入，例如
jar cvfm myapplication.jar myapplication.mf -C classdir 
来体验一下manifest文件的作用，如果现在我们有一个Java 应用程序打包在myapplication.jar中， main class为 com.example.myapp.MyAppMain ，那么我们可以用以下的命令来运行
java -classpath myapplication.jar com.example.myapp.MyAppMain
这显然太麻烦了，现在我们来创建自己的manifest文件，如下：
Manifest-Version: 1.0
Created-By: JDJ example
Main-Class: com.example.myapp.MyAppMain
这样我们就可以使用如下的命令来运行程序了：（明显简单多了，也不会造成无谓的拼写错误）
java -jar myapplication.jar 

使用gradle解决我们项目需要的依赖包是主要目的，我们通常可以在http://mvnrepository.com/寻找到依赖包的gradle写法，如键入jdonframework，得到结果：http://mvnrepository.com/search.html?query=jdonframework
点按进去以后，选择最新版本，再选择gradle

我们就要在build.gradle文件中加入：

repositories { mavenCentral() }
dependencies {
  compile "org.jdon:jdonframework:6.8"
}
　　这里的第一行表示的构建应该从Maven的中央存储库寻找解决它的依赖。gradle非常依赖于Maven构建工具许多惯例和设施，包括使用Maven中央作为库的依赖源。
　　dependencies中定义的是一个编译依赖，表示在编译时可用，如果构建WAR文件， 那么依赖包将被构建到war文件的 /WEB-INF/libs目录。
　　这样，在我们项目程序中，使用该库包的类以后，gradle就能够编译打包。 
not like this as shown in 'http://mvnrepository.com/artifact/org.jdon/jdonframework/6.8':
　　compile group: 'org.jdon', name: 'jdonframework', version: '6.8'

package hello;

import com.jdon.util.UtilValidate;

public class HelloWorld {
  public static void main(String[] args) {
    String s ="hello1";
    if (!UtilValidate.isEmpty(s)) {
      System.out.println("hello2"); 
    }
  }
}

$ jar tvf ~/.gradle/caches/modules-2/files-2.1/org.jdon/jdonframework/6.8/3d4ba85fbe2a426b239658ab844c8a2f379f0611/jdonframework-6.8.jar | grep UtilValidate
 17692 Fri Oct 11 11:44:28 CST 2013 com/jdon/util/UtilValidate.class

 $ java -jar ./build/libs/hello_gradle.jar
Exception in thread "main" java.lang.NoClassDefFoundError: com/jdon/util/UtilValidate
  at hello.HelloWorld.main(HelloWorld.java:8)
Caused by: java.lang.ClassNotFoundException: com.jdon.util.UtilValidate
  at java.net.URLClassLoader.findClass(URLClassLoader.java:381)
  at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
  at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331)
  at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
  ... 1 more


http://www.cnblogs.com/zhaodedong/p/5365140.html
gradle想把所有依赖打进jar包主要有两种方式：一种是重写jar动作，一种是用第三方插件。
jar {
    manifest {
        attributes 'Main-Class': 'hello.HelloWorld'
    }    
    into('lib') {
        from configurations.runtime
    }
}
重写jar动作
主要是into这一句，可以参照gradle的api文档。里面专门讲了这一块。
这种方式生成的jar包，是把所有的依赖全部打进了lib中。我一直在用这种方式打包。

~/workspace/java/hello_gradle
$ jar tvf ./build/libs/hello_gradle.jar
     0 Fri Nov 04 19:08:40 CST 2016 META-INF/
    55 Fri Nov 04 19:08:40 CST 2016 META-INF/MANIFEST.MF
     0 Fri Nov 04 16:14:16 CST 2016 hello/
   733 Fri Nov 04 18:57:40 CST 2016 hello/HelloWorld.class
     0 Fri Nov 04 19:08:40 CST 2016 lib/
360774 Fri Nov 04 18:56:24 CST 2016 lib/jdonframework-6.8.jar
 18470 Fri Nov 04 18:56:24 CST 2016 lib/scannotation-1.0.2.jar
114040 Fri Nov 04 18:56:24 CST 2016 lib/picocontainer-1.2.jar
2189117 Fri Nov 04 18:56:34 CST 2016 lib/guava-14.0.1.jar
 29871 Fri Nov 04 18:56:34 CST 2016 lib/regexp-1.2.jar
 73287 Fri Nov 04 18:56:34 CST 2016 lib/disruptor-3.2.0.jar
287192 Fri Nov 04 18:56:36 CST 2016 lib/cglib-2.2.2.jar
  4467 Fri Nov 04 18:56:36 CST 2016 lib/aopalliance-1.0.jar
111119 Wed Oct 14 18:45:04 CST 2015 lib/commons-pool-1.6.jar
153253 Fri Nov 04 18:56:36 CST 2016 lib/jdom-1.0.jar
635227 Fri Nov 04 18:56:38 CST 2016 lib/log4j-core-2.0-beta8.jar
107193 Fri Nov 04 18:56:38 CST 2016 lib/log4j-api-2.0-beta8.jar
203035 Fri Nov 04 18:56:40 CST 2016 lib/ehcache-1.6.2.jar
 43581 Fri Nov 04 18:56:40 CST 2016 lib/asm-3.3.1.jar
542241 Fri Nov 04 18:56:42 CST 2016 lib/javassist-3.6.0.GA.jar


to use a dependent jar file:
http://www.cnblogs.com/huhu0013/archive/2012/11/09/2762573.html

apply plugin: 'java'

repositories { mavenCentral() }
dependencies {
  compile "org.jdon:jdonframework:6.8"
}

jar {
    manifest {
        attributes 'Main-Class': 'hello.HelloWorld', 'Class-Path': '/home/kidd/.gradle/caches/modules-2/files-2.1/org.jdon/jdonframework/6.8/3d4ba85fbe2a426b239658ab844c8a2f379f0611/jdonframework-6.8.jar'
    }
}

$ java -jar ./build/libs/hello_gradle.jar 
hello2
hello3

package hello;

import com.jdon.util.UtilValidate;

public class HelloWorld {
  public static void main(String[] args) {
    String s ="hello1";
    if (!UtilValidate.isEmpty(s)) {
      System.out.println("hello2"); 
    }
    System.out.println("hello3");
  }
}

--------------- 2016-11-18 17:43:26
sample build.gradle:

group 'com.abcft'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'jetty'

jettyRun {
    httpPort = 9080
    contextPath = "/"
    stopKey = "stopKey"
    stopPort = 9081
    reload = "automatic"
    scanIntervalSeconds = 1
}
jettyRunWar {
    httpPort = 9080
    contextPath = "/"
    stopKey = "stopKey"
    stopPort = 9081
}
jettyStop {
    stopKey = "stopKey"
    stopPort = 9081
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task releaseWar(type: War, dependsOn: classes) {
    from('src/main/resources/META-INF') {
        into('WEB-INF/classes/META-INF')
        include 'config-release.properties', 'persistence-release.xml'
        rename { String fileName ->
            fileName.replace("-release", "")
        }
    }
    baseName = "apes-release"
}

repositories {
    jcenter()
}

dependencies {
    testCompile 'junit:junit:4.11'
    compile 'log4j:log4j:1.2.17'
    compile 'org.eclipse.jetty:jetty-util:9.3.8.v20160314'
    compile 'javax.websocket:javax.websocket-api:1.0'
    compile 'org.glassfish.tyrus:tyrus-container-grizzly-client:1.8.3'
    compile 'org.glassfish.jersey.core:jersey-server:2.24'
    compile 'org.glassfish.jersey.containers:jersey-container-servlet:2.24'
    testCompile 'org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-jetty:2.24'
    compile fileTree(dir: 'libs', include: '*.jar')
    compile 'org.glassfish.jersey.media:jersey-media-json-processing:2.24'
    compile 'org.glassfish.jersey.media:jersey-media-multipart:2.24'
    compile 'mysql:mysql-connector-java:5.1.6'
    compile 'org.mongodb:mongo-java-driver:3.3.0'
    compile group: 'org.hibernate.javax.persistence', name: 'hibernate-jpa-2.1-api', version: '1.0.0.Final'
    compile group: 'commons-io', name: 'commons-io', version: '2.4'
    compile group: 'org.hibernate', name: 'hibernate-entitymanager', version: '5.1.2.Final'
    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'com.udojava:EvalEx:1.0'
}
